
STM32F401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e6c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800300c  0800300c  0000400c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800306c  0800306c  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  0800306c  0800306c  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800306c  0800306c  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800306c  0800306c  0000406c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003070  08003070  00004070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003074  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012de8  20000014  08003088  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012dfc  08003088  00005dfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007046  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015d2  00000000  00000000  0000c08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b0  00000000  00000000  0000d660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000506  00000000  00000000  0000dd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002aca  00000000  00000000  0000e216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000088f1  00000000  00000000  00010ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000164d7  00000000  00000000  000195d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0002faa8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a40  00000000  00000000  0002faec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0003152c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002ff4 	.word	0x08002ff4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08002ff4 	.word	0x08002ff4

080001e0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f103 0208 	add.w	r2, r3, #8
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f04f 32ff 	mov.w	r2, #4294967295
 80001f8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	f103 0208 	add.w	r2, r3, #8
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f103 0208 	add.w	r2, r3, #8
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr

08000220 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr

0800023a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800023a:	b480      	push	{r7}
 800023c:	b085      	sub	sp, #20
 800023e:	af00      	add	r7, sp, #0
 8000240:	6078      	str	r0, [r7, #4]
 8000242:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000250:	d103      	bne.n	800025a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	691b      	ldr	r3, [r3, #16]
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	e00c      	b.n	8000274 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	3308      	adds	r3, #8
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	e002      	b.n	8000268 <vListInsert+0x2e>
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	68ba      	ldr	r2, [r7, #8]
 8000270:	429a      	cmp	r2, r3
 8000272:	d2f6      	bcs.n	8000262 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	685a      	ldr	r2, [r3, #4]
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	683a      	ldr	r2, [r7, #0]
 8000282:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	68fa      	ldr	r2, [r7, #12]
 8000288:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	683a      	ldr	r2, [r7, #0]
 800028e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	1c5a      	adds	r2, r3, #1
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	601a      	str	r2, [r3, #0]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	691b      	ldr	r3, [r3, #16]
 80002b8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	6892      	ldr	r2, [r2, #8]
 80002c2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	6852      	ldr	r2, [r2, #4]
 80002cc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d103      	bne.n	80002e0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	689a      	ldr	r2, [r3, #8]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	1e5a      	subs	r2, r3, #1
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	681b      	ldr	r3, [r3, #0]
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3714      	adds	r7, #20
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800030a:	2301      	movs	r3, #1
 800030c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8000312:	693b      	ldr	r3, [r7, #16]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d10b      	bne.n	8000330 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800031c:	f383 8811 	msr	BASEPRI, r3
 8000320:	f3bf 8f6f 	isb	sy
 8000324:	f3bf 8f4f 	dsb	sy
 8000328:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800032a:	bf00      	nop
 800032c:	bf00      	nop
 800032e:	e7fd      	b.n	800032c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000330:	693b      	ldr	r3, [r7, #16]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d05d      	beq.n	80003f2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8000336:	693b      	ldr	r3, [r7, #16]
 8000338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800033a:	2b00      	cmp	r3, #0
 800033c:	d059      	beq.n	80003f2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800033e:	693b      	ldr	r3, [r7, #16]
 8000340:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000342:	693b      	ldr	r3, [r7, #16]
 8000344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000346:	2100      	movs	r1, #0
 8000348:	fba3 2302 	umull	r2, r3, r3, r2
 800034c:	2b00      	cmp	r3, #0
 800034e:	d000      	beq.n	8000352 <xQueueGenericReset+0x52>
 8000350:	2101      	movs	r1, #1
 8000352:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8000354:	2b00      	cmp	r3, #0
 8000356:	d14c      	bne.n	80003f2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8000358:	f001 fdf0 	bl	8001f3c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800035c:	693b      	ldr	r3, [r7, #16]
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	693b      	ldr	r3, [r7, #16]
 8000362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000364:	6939      	ldr	r1, [r7, #16]
 8000366:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8000368:	fb01 f303 	mul.w	r3, r1, r3
 800036c:	441a      	add	r2, r3
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000372:	693b      	ldr	r3, [r7, #16]
 8000374:	2200      	movs	r2, #0
 8000376:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8000378:	693b      	ldr	r3, [r7, #16]
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	693b      	ldr	r3, [r7, #16]
 800037e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000388:	3b01      	subs	r3, #1
 800038a:	6939      	ldr	r1, [r7, #16]
 800038c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800038e:	fb01 f303 	mul.w	r3, r1, r3
 8000392:	441a      	add	r2, r3
 8000394:	693b      	ldr	r3, [r7, #16]
 8000396:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8000398:	693b      	ldr	r3, [r7, #16]
 800039a:	22ff      	movs	r2, #255	@ 0xff
 800039c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80003a0:	693b      	ldr	r3, [r7, #16]
 80003a2:	22ff      	movs	r2, #255	@ 0xff
 80003a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80003a8:	683b      	ldr	r3, [r7, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d114      	bne.n	80003d8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80003ae:	693b      	ldr	r3, [r7, #16]
 80003b0:	691b      	ldr	r3, [r3, #16]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d01a      	beq.n	80003ec <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	3310      	adds	r3, #16
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 ff50 	bl	8001260 <xTaskRemoveFromEventList>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d012      	beq.n	80003ec <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80003c6:	4b16      	ldr	r3, [pc, #88]	@ (8000420 <xQueueGenericReset+0x120>)
 80003c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	f3bf 8f4f 	dsb	sy
 80003d2:	f3bf 8f6f 	isb	sy
 80003d6:	e009      	b.n	80003ec <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80003d8:	693b      	ldr	r3, [r7, #16]
 80003da:	3310      	adds	r3, #16
 80003dc:	4618      	mov	r0, r3
 80003de:	f7ff feff 	bl	80001e0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	3324      	adds	r3, #36	@ 0x24
 80003e6:	4618      	mov	r0, r3
 80003e8:	f7ff fefa 	bl	80001e0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80003ec:	f001 fdd8 	bl	8001fa0 <vPortExitCritical>
 80003f0:	e001      	b.n	80003f6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d10b      	bne.n	8000414 <xQueueGenericReset+0x114>
        __asm volatile
 80003fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000400:	f383 8811 	msr	BASEPRI, r3
 8000404:	f3bf 8f6f 	isb	sy
 8000408:	f3bf 8f4f 	dsb	sy
 800040c:	60bb      	str	r3, [r7, #8]
    }
 800040e:	bf00      	nop
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000414:	697b      	ldr	r3, [r7, #20]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	e000ed04 	.word	0xe000ed04

08000424 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000424:	b580      	push	{r7, lr}
 8000426:	b08a      	sub	sp, #40	@ 0x28
 8000428:	af02      	add	r7, sp, #8
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	4613      	mov	r3, r2
 8000430:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000432:	2300      	movs	r3, #0
 8000434:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d02e      	beq.n	800049a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800043c:	2100      	movs	r1, #0
 800043e:	68ba      	ldr	r2, [r7, #8]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	fba3 2302 	umull	r2, r3, r3, r2
 8000446:	2b00      	cmp	r3, #0
 8000448:	d000      	beq.n	800044c <xQueueGenericCreate+0x28>
 800044a:	2101      	movs	r1, #1
 800044c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800044e:	2b00      	cmp	r3, #0
 8000450:	d123      	bne.n	800049a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	68ba      	ldr	r2, [r7, #8]
 8000456:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800045a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800045e:	d81c      	bhi.n	800049a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	fb02 f303 	mul.w	r3, r2, r3
 8000468:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	3350      	adds	r3, #80	@ 0x50
 800046e:	4618      	mov	r0, r3
 8000470:	f001 fe4c 	bl	800210c <pvPortMalloc>
 8000474:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8000476:	69fb      	ldr	r3, [r7, #28]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d01d      	beq.n	80004b8 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800047c:	69fb      	ldr	r3, [r7, #28]
 800047e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	3350      	adds	r3, #80	@ 0x50
 8000484:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000486:	79fa      	ldrb	r2, [r7, #7]
 8000488:	69fb      	ldr	r3, [r7, #28]
 800048a:	9300      	str	r3, [sp, #0]
 800048c:	4613      	mov	r3, r2
 800048e:	697a      	ldr	r2, [r7, #20]
 8000490:	68b9      	ldr	r1, [r7, #8]
 8000492:	68f8      	ldr	r0, [r7, #12]
 8000494:	f000 f815 	bl	80004c2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8000498:	e00e      	b.n	80004b8 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800049a:	69fb      	ldr	r3, [r7, #28]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d10b      	bne.n	80004b8 <xQueueGenericCreate+0x94>
        __asm volatile
 80004a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80004a4:	f383 8811 	msr	BASEPRI, r3
 80004a8:	f3bf 8f6f 	isb	sy
 80004ac:	f3bf 8f4f 	dsb	sy
 80004b0:	613b      	str	r3, [r7, #16]
    }
 80004b2:	bf00      	nop
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80004b8:	69fb      	ldr	r3, [r7, #28]
    }
 80004ba:	4618      	mov	r0, r3
 80004bc:	3720      	adds	r7, #32
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b084      	sub	sp, #16
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	60f8      	str	r0, [r7, #12]
 80004ca:	60b9      	str	r1, [r7, #8]
 80004cc:	607a      	str	r2, [r7, #4]
 80004ce:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d103      	bne.n	80004de <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80004d6:	69bb      	ldr	r3, [r7, #24]
 80004d8:	69ba      	ldr	r2, [r7, #24]
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	e002      	b.n	80004e4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80004de:	69bb      	ldr	r3, [r7, #24]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80004e4:	69bb      	ldr	r3, [r7, #24]
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80004ea:	69bb      	ldr	r3, [r7, #24]
 80004ec:	68ba      	ldr	r2, [r7, #8]
 80004ee:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80004f0:	2101      	movs	r1, #1
 80004f2:	69b8      	ldr	r0, [r7, #24]
 80004f4:	f7ff ff04 	bl	8000300 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	78fa      	ldrb	r2, [r7, #3]
 80004fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}

08000508 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000514:	2300      	movs	r3, #0
 8000516:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800051c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800051e:	2b00      	cmp	r3, #0
 8000520:	d10b      	bne.n	800053a <xQueueReceive+0x32>
        __asm volatile
 8000522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000526:	f383 8811 	msr	BASEPRI, r3
 800052a:	f3bf 8f6f 	isb	sy
 800052e:	f3bf 8f4f 	dsb	sy
 8000532:	623b      	str	r3, [r7, #32]
    }
 8000534:	bf00      	nop
 8000536:	bf00      	nop
 8000538:	e7fd      	b.n	8000536 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d103      	bne.n	8000548 <xQueueReceive+0x40>
 8000540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000544:	2b00      	cmp	r3, #0
 8000546:	d101      	bne.n	800054c <xQueueReceive+0x44>
 8000548:	2301      	movs	r3, #1
 800054a:	e000      	b.n	800054e <xQueueReceive+0x46>
 800054c:	2300      	movs	r3, #0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d10b      	bne.n	800056a <xQueueReceive+0x62>
        __asm volatile
 8000552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000556:	f383 8811 	msr	BASEPRI, r3
 800055a:	f3bf 8f6f 	isb	sy
 800055e:	f3bf 8f4f 	dsb	sy
 8000562:	61fb      	str	r3, [r7, #28]
    }
 8000564:	bf00      	nop
 8000566:	bf00      	nop
 8000568:	e7fd      	b.n	8000566 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800056a:	f001 f88d 	bl	8001688 <xTaskGetSchedulerState>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d102      	bne.n	800057a <xQueueReceive+0x72>
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d101      	bne.n	800057e <xQueueReceive+0x76>
 800057a:	2301      	movs	r3, #1
 800057c:	e000      	b.n	8000580 <xQueueReceive+0x78>
 800057e:	2300      	movs	r3, #0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d10b      	bne.n	800059c <xQueueReceive+0x94>
        __asm volatile
 8000584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000588:	f383 8811 	msr	BASEPRI, r3
 800058c:	f3bf 8f6f 	isb	sy
 8000590:	f3bf 8f4f 	dsb	sy
 8000594:	61bb      	str	r3, [r7, #24]
    }
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800059c:	f001 fcce 	bl	8001f3c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80005a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005a4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80005a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d01f      	beq.n	80005ec <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80005ac:	68b9      	ldr	r1, [r7, #8]
 80005ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80005b0:	f000 f88c 	bl	80006cc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80005b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005b6:	1e5a      	subs	r2, r3, #1
 80005b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005ba:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80005bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005be:	691b      	ldr	r3, [r3, #16]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d00f      	beq.n	80005e4 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80005c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005c6:	3310      	adds	r3, #16
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fe49 	bl	8001260 <xTaskRemoveFromEventList>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d007      	beq.n	80005e4 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80005d4:	4b3c      	ldr	r3, [pc, #240]	@ (80006c8 <xQueueReceive+0x1c0>)
 80005d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	f3bf 8f4f 	dsb	sy
 80005e0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80005e4:	f001 fcdc 	bl	8001fa0 <vPortExitCritical>
                return pdPASS;
 80005e8:	2301      	movs	r3, #1
 80005ea:	e069      	b.n	80006c0 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d103      	bne.n	80005fa <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80005f2:	f001 fcd5 	bl	8001fa0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80005f6:	2300      	movs	r3, #0
 80005f8:	e062      	b.n	80006c0 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80005fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d106      	bne.n	800060e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4618      	mov	r0, r3
 8000606:	f000 ff03 	bl	8001410 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800060a:	2301      	movs	r3, #1
 800060c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800060e:	f001 fcc7 	bl	8001fa0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000612:	f000 fb2b 	bl	8000c6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000616:	f001 fc91 	bl	8001f3c <vPortEnterCritical>
 800061a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800061c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000620:	b25b      	sxtb	r3, r3
 8000622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000626:	d103      	bne.n	8000630 <xQueueReceive+0x128>
 8000628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800062a:	2200      	movs	r2, #0
 800062c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000632:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000636:	b25b      	sxtb	r3, r3
 8000638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800063c:	d103      	bne.n	8000646 <xQueueReceive+0x13e>
 800063e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000646:	f001 fcab 	bl	8001fa0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800064a:	1d3a      	adds	r2, r7, #4
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fef2 	bl	800143c <xTaskCheckForTimeOut>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d123      	bne.n	80006a6 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800065e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000660:	f000 f8ac 	bl	80007bc <prvIsQueueEmpty>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d017      	beq.n	800069a <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800066a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800066c:	3324      	adds	r3, #36	@ 0x24
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f000 fd88 	bl	8001188 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000678:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800067a:	f000 f84d 	bl	8000718 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800067e:	f000 fb03 	bl	8000c88 <xTaskResumeAll>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d189      	bne.n	800059c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <xQueueReceive+0x1c0>)
 800068a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	f3bf 8f4f 	dsb	sy
 8000694:	f3bf 8f6f 	isb	sy
 8000698:	e780      	b.n	800059c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800069a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800069c:	f000 f83c 	bl	8000718 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80006a0:	f000 faf2 	bl	8000c88 <xTaskResumeAll>
 80006a4:	e77a      	b.n	800059c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80006a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80006a8:	f000 f836 	bl	8000718 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80006ac:	f000 faec 	bl	8000c88 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80006b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80006b2:	f000 f883 	bl	80007bc <prvIsQueueEmpty>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	f43f af6f 	beq.w	800059c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80006be:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3730      	adds	r7, #48	@ 0x30
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	e000ed04 	.word	0xe000ed04

080006cc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d018      	beq.n	8000710 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	68da      	ldr	r2, [r3, #12]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e6:	441a      	add	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	68da      	ldr	r2, [r3, #12]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d303      	bcc.n	8000700 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	68d9      	ldr	r1, [r3, #12]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	461a      	mov	r2, r3
 800070a:	6838      	ldr	r0, [r7, #0]
 800070c:	f002 fc64 	bl	8002fd8 <memcpy>
    }
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000720:	f001 fc0c 	bl	8001f3c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800072a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800072c:	e011      	b.n	8000752 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000732:	2b00      	cmp	r3, #0
 8000734:	d012      	beq.n	800075c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	3324      	adds	r3, #36	@ 0x24
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fd90 	bl	8001260 <xTaskRemoveFromEventList>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8000746:	f000 fee1 	bl	800150c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	3b01      	subs	r3, #1
 800074e:	b2db      	uxtb	r3, r3
 8000750:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000756:	2b00      	cmp	r3, #0
 8000758:	dce9      	bgt.n	800072e <prvUnlockQueue+0x16>
 800075a:	e000      	b.n	800075e <prvUnlockQueue+0x46>
                    break;
 800075c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	22ff      	movs	r2, #255	@ 0xff
 8000762:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8000766:	f001 fc1b 	bl	8001fa0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800076a:	f001 fbe7 	bl	8001f3c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000774:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8000776:	e011      	b.n	800079c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	691b      	ldr	r3, [r3, #16]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d012      	beq.n	80007a6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3310      	adds	r3, #16
 8000784:	4618      	mov	r0, r3
 8000786:	f000 fd6b 	bl	8001260 <xTaskRemoveFromEventList>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000790:	f000 febc 	bl	800150c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000794:	7bbb      	ldrb	r3, [r7, #14]
 8000796:	3b01      	subs	r3, #1
 8000798:	b2db      	uxtb	r3, r3
 800079a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800079c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dce9      	bgt.n	8000778 <prvUnlockQueue+0x60>
 80007a4:	e000      	b.n	80007a8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80007a6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	22ff      	movs	r2, #255	@ 0xff
 80007ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80007b0:	f001 fbf6 	bl	8001fa0 <vPortExitCritical>
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80007c4:	f001 fbba 	bl	8001f3c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d102      	bne.n	80007d6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80007d0:	2301      	movs	r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	e001      	b.n	80007da <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80007da:	f001 fbe1 	bl	8001fa0 <vPortExitCritical>

    return xReturn;
 80007de:	68fb      	ldr	r3, [r7, #12]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80007e8:	b480      	push	{r7}
 80007ea:	b087      	sub	sp, #28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d10b      	bne.n	8000814 <vQueueAddToRegistry+0x2c>
        __asm volatile
 80007fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000800:	f383 8811 	msr	BASEPRI, r3
 8000804:	f3bf 8f6f 	isb	sy
 8000808:	f3bf 8f4f 	dsb	sy
 800080c:	60fb      	str	r3, [r7, #12]
    }
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d024      	beq.n	8000864 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	e01e      	b.n	800085e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000820:	4a18      	ldr	r2, [pc, #96]	@ (8000884 <vQueueAddToRegistry+0x9c>)
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	4413      	add	r3, r2
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	429a      	cmp	r2, r3
 800082e:	d105      	bne.n	800083c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	4a13      	ldr	r2, [pc, #76]	@ (8000884 <vQueueAddToRegistry+0x9c>)
 8000836:	4413      	add	r3, r2
 8000838:	613b      	str	r3, [r7, #16]
                    break;
 800083a:	e013      	b.n	8000864 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d10a      	bne.n	8000858 <vQueueAddToRegistry+0x70>
 8000842:	4a10      	ldr	r2, [pc, #64]	@ (8000884 <vQueueAddToRegistry+0x9c>)
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d104      	bne.n	8000858 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	4a0c      	ldr	r2, [pc, #48]	@ (8000884 <vQueueAddToRegistry+0x9c>)
 8000854:	4413      	add	r3, r2
 8000856:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	3301      	adds	r3, #1
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	2b07      	cmp	r3, #7
 8000862:	d9dd      	bls.n	8000820 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d005      	beq.n	8000876 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	683a      	ldr	r2, [r7, #0]
 800086e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8000876:	bf00      	nop
 8000878:	371c      	adds	r7, #28
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000030 	.word	0x20000030

08000888 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000898:	f001 fb50 	bl	8001f3c <vPortEnterCritical>
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80008a2:	b25b      	sxtb	r3, r3
 80008a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a8:	d103      	bne.n	80008b2 <vQueueWaitForMessageRestricted+0x2a>
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008be:	d103      	bne.n	80008c8 <vQueueWaitForMessageRestricted+0x40>
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80008c8:	f001 fb6a 	bl	8001fa0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d106      	bne.n	80008e2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	3324      	adds	r3, #36	@ 0x24
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	68b9      	ldr	r1, [r7, #8]
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 fc79 	bl	80011d4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80008e2:	6978      	ldr	r0, [r7, #20]
 80008e4:	f7ff ff18 	bl	8000718 <prvUnlockQueue>
    }
 80008e8:	bf00      	nop
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	@ 0x30
 80008f4:	af04      	add	r7, sp, #16
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	4613      	mov	r3, r2
 80008fe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	4618      	mov	r0, r3
 8000906:	f001 fc01 	bl	800210c <pvPortMalloc>
 800090a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d013      	beq.n	800093a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000912:	2058      	movs	r0, #88	@ 0x58
 8000914:	f001 fbfa 	bl	800210c <pvPortMalloc>
 8000918:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d008      	beq.n	8000932 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000920:	2258      	movs	r2, #88	@ 0x58
 8000922:	2100      	movs	r1, #0
 8000924:	69f8      	ldr	r0, [r7, #28]
 8000926:	f002 fb2a 	bl	8002f7e <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000930:	e005      	b.n	800093e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f001 fca6 	bl	8002284 <vPortFree>
 8000938:	e001      	b.n	800093e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d013      	beq.n	800096c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000944:	88fa      	ldrh	r2, [r7, #6]
 8000946:	2300      	movs	r3, #0
 8000948:	9303      	str	r3, [sp, #12]
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	9302      	str	r3, [sp, #8]
 800094e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	68b9      	ldr	r1, [r7, #8]
 800095a:	68f8      	ldr	r0, [r7, #12]
 800095c:	f000 f80e 	bl	800097c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000960:	69f8      	ldr	r0, [r7, #28]
 8000962:	f000 f89b 	bl	8000a9c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000966:	2301      	movs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	e002      	b.n	8000972 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800096c:	f04f 33ff 	mov.w	r3, #4294967295
 8000970:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000972:	69bb      	ldr	r3, [r7, #24]
    }
 8000974:	4618      	mov	r0, r3
 8000976:	3720      	adds	r7, #32
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800098a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800098c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	461a      	mov	r2, r3
 8000994:	21a5      	movs	r1, #165	@ 0xa5
 8000996:	f002 faf2 	bl	8002f7e <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800099a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800099c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80009a4:	3b01      	subs	r3, #1
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	f023 0307 	bic.w	r3, r3, #7
 80009b2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d00b      	beq.n	80009d6 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80009be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009c2:	f383 8811 	msr	BASEPRI, r3
 80009c6:	f3bf 8f6f 	isb	sy
 80009ca:	f3bf 8f4f 	dsb	sy
 80009ce:	617b      	str	r3, [r7, #20]
    }
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	e7fd      	b.n	80009d2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d01e      	beq.n	8000a1a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
 80009e0:	e012      	b.n	8000a08 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	4413      	add	r3, r2
 80009e8:	7819      	ldrb	r1, [r3, #0]
 80009ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	4413      	add	r3, r2
 80009f0:	3334      	adds	r3, #52	@ 0x34
 80009f2:	460a      	mov	r2, r1
 80009f4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	4413      	add	r3, r2
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d006      	beq.n	8000a10 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3301      	adds	r3, #1
 8000a06:	61fb      	str	r3, [r7, #28]
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	2b09      	cmp	r3, #9
 8000a0c:	d9e9      	bls.n	80009e2 <prvInitialiseNewTask+0x66>
 8000a0e:	e000      	b.n	8000a12 <prvInitialiseNewTask+0x96>
            {
                break;
 8000a10:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a14:	2200      	movs	r2, #0
 8000a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1c:	2b04      	cmp	r3, #4
 8000a1e:	d90b      	bls.n	8000a38 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8000a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a24:	f383 8811 	msr	BASEPRI, r3
 8000a28:	f3bf 8f6f 	isb	sy
 8000a2c:	f3bf 8f4f 	dsb	sy
 8000a30:	613b      	str	r3, [r7, #16]
    }
 8000a32:	bf00      	nop
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	d901      	bls.n	8000a42 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a46:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a4c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a50:	3304      	adds	r3, #4
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fbe4 	bl	8000220 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a5a:	3318      	adds	r3, #24
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fbdf 	bl	8000220 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a66:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a6a:	f1c3 0205 	rsb	r2, r3, #5
 8000a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a70:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a76:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	68f9      	ldr	r1, [r7, #12]
 8000a7c:	69b8      	ldr	r0, [r7, #24]
 8000a7e:	f001 f92d 	bl	8001cdc <pxPortInitialiseStack>
 8000a82:	4602      	mov	r2, r0
 8000a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000a86:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a92:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000a94:	bf00      	nop
 8000a96:	3720      	adds	r7, #32
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000aa4:	f001 fa4a 	bl	8001f3c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000aa8:	4b40      	ldr	r3, [pc, #256]	@ (8000bac <prvAddNewTaskToReadyList+0x110>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	3301      	adds	r3, #1
 8000aae:	4a3f      	ldr	r2, [pc, #252]	@ (8000bac <prvAddNewTaskToReadyList+0x110>)
 8000ab0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb0 <prvAddNewTaskToReadyList+0x114>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d109      	bne.n	8000ace <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000aba:	4a3d      	ldr	r2, [pc, #244]	@ (8000bb0 <prvAddNewTaskToReadyList+0x114>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000ac0:	4b3a      	ldr	r3, [pc, #232]	@ (8000bac <prvAddNewTaskToReadyList+0x110>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d110      	bne.n	8000aea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000ac8:	f000 fd44 	bl	8001554 <prvInitialiseTaskLists>
 8000acc:	e00d      	b.n	8000aea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000ace:	4b39      	ldr	r3, [pc, #228]	@ (8000bb4 <prvAddNewTaskToReadyList+0x118>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d109      	bne.n	8000aea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000ad6:	4b36      	ldr	r3, [pc, #216]	@ (8000bb0 <prvAddNewTaskToReadyList+0x114>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d802      	bhi.n	8000aea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000ae4:	4a32      	ldr	r2, [pc, #200]	@ (8000bb0 <prvAddNewTaskToReadyList+0x114>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000aea:	4b33      	ldr	r3, [pc, #204]	@ (8000bb8 <prvAddNewTaskToReadyList+0x11c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	3301      	adds	r3, #1
 8000af0:	4a31      	ldr	r2, [pc, #196]	@ (8000bb8 <prvAddNewTaskToReadyList+0x11c>)
 8000af2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000af4:	4b30      	ldr	r3, [pc, #192]	@ (8000bb8 <prvAddNewTaskToReadyList+0x11c>)
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b00:	2201      	movs	r2, #1
 8000b02:	409a      	lsls	r2, r3
 8000b04:	4b2d      	ldr	r3, [pc, #180]	@ (8000bbc <prvAddNewTaskToReadyList+0x120>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	4a2c      	ldr	r2, [pc, #176]	@ (8000bbc <prvAddNewTaskToReadyList+0x120>)
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b12:	492b      	ldr	r1, [pc, #172]	@ (8000bc0 <prvAddNewTaskToReadyList+0x124>)
 8000b14:	4613      	mov	r3, r2
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4413      	add	r3, r2
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	3304      	adds	r3, #4
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	3204      	adds	r2, #4
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	1d1a      	adds	r2, r3, #4
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b48:	4613      	mov	r3, r2
 8000b4a:	009b      	lsls	r3, r3, #2
 8000b4c:	4413      	add	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc0 <prvAddNewTaskToReadyList+0x124>)
 8000b52:	441a      	add	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	615a      	str	r2, [r3, #20]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b5c:	4918      	ldr	r1, [pc, #96]	@ (8000bc0 <prvAddNewTaskToReadyList+0x124>)
 8000b5e:	4613      	mov	r3, r2
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	4413      	add	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	440b      	add	r3, r1
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	1c59      	adds	r1, r3, #1
 8000b6c:	4814      	ldr	r0, [pc, #80]	@ (8000bc0 <prvAddNewTaskToReadyList+0x124>)
 8000b6e:	4613      	mov	r3, r2
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	4413      	add	r3, r2
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	4403      	add	r3, r0
 8000b78:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000b7a:	f001 fa11 	bl	8001fa0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <prvAddNewTaskToReadyList+0x118>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00e      	beq.n	8000ba4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <prvAddNewTaskToReadyList+0x114>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000b94:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <prvAddNewTaskToReadyList+0x128>)
 8000b96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	f3bf 8f4f 	dsb	sy
 8000ba0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000148 	.word	0x20000148
 8000bb0:	20000070 	.word	0x20000070
 8000bb4:	20000154 	.word	0x20000154
 8000bb8:	20000164 	.word	0x20000164
 8000bbc:	20000150 	.word	0x20000150
 8000bc0:	20000074 	.word	0x20000074
 8000bc4:	e000ed04 	.word	0xe000ed04

08000bc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000bce:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <vTaskStartScheduler+0x88>)
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	2282      	movs	r2, #130	@ 0x82
 8000bda:	491e      	ldr	r1, [pc, #120]	@ (8000c54 <vTaskStartScheduler+0x8c>)
 8000bdc:	481e      	ldr	r0, [pc, #120]	@ (8000c58 <vTaskStartScheduler+0x90>)
 8000bde:	f7ff fe87 	bl	80008f0 <xTaskCreate>
 8000be2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d102      	bne.n	8000bf0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8000bea:	f000 fdeb 	bl	80017c4 <xTimerCreateTimerTask>
 8000bee:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d116      	bne.n	8000c24 <vTaskStartScheduler+0x5c>
        __asm volatile
 8000bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bfa:	f383 8811 	msr	BASEPRI, r3
 8000bfe:	f3bf 8f6f 	isb	sy
 8000c02:	f3bf 8f4f 	dsb	sy
 8000c06:	60bb      	str	r3, [r7, #8]
    }
 8000c08:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <vTaskStartScheduler+0x94>)
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000c12:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <vTaskStartScheduler+0x98>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000c18:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <vTaskStartScheduler+0x9c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000c1e:	f001 f8e9 	bl	8001df4 <xPortStartScheduler>
 8000c22:	e00f      	b.n	8000c44 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2a:	d10b      	bne.n	8000c44 <vTaskStartScheduler+0x7c>
        __asm volatile
 8000c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c30:	f383 8811 	msr	BASEPRI, r3
 8000c34:	f3bf 8f6f 	isb	sy
 8000c38:	f3bf 8f4f 	dsb	sy
 8000c3c:	607b      	str	r3, [r7, #4]
    }
 8000c3e:	bf00      	nop
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000c44:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <vTaskStartScheduler+0xa0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000016c 	.word	0x2000016c
 8000c54:	0800300c 	.word	0x0800300c
 8000c58:	08001525 	.word	0x08001525
 8000c5c:	20000168 	.word	0x20000168
 8000c60:	20000154 	.word	0x20000154
 8000c64:	2000014c 	.word	0x2000014c
 8000c68:	20000000 	.word	0x20000000

08000c6c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000c70:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <vTaskSuspendAll+0x18>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	3301      	adds	r3, #1
 8000c76:	4a03      	ldr	r2, [pc, #12]	@ (8000c84 <vTaskSuspendAll+0x18>)
 8000c78:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	20000170 	.word	0x20000170

08000c88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000c96:	4b71      	ldr	r3, [pc, #452]	@ (8000e5c <xTaskResumeAll+0x1d4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10b      	bne.n	8000cb6 <xTaskResumeAll+0x2e>
        __asm volatile
 8000c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ca2:	f383 8811 	msr	BASEPRI, r3
 8000ca6:	f3bf 8f6f 	isb	sy
 8000caa:	f3bf 8f4f 	dsb	sy
 8000cae:	607b      	str	r3, [r7, #4]
    }
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	e7fd      	b.n	8000cb2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000cb6:	f001 f941 	bl	8001f3c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000cba:	4b68      	ldr	r3, [pc, #416]	@ (8000e5c <xTaskResumeAll+0x1d4>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	4a66      	ldr	r2, [pc, #408]	@ (8000e5c <xTaskResumeAll+0x1d4>)
 8000cc2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000cc4:	4b65      	ldr	r3, [pc, #404]	@ (8000e5c <xTaskResumeAll+0x1d4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f040 80c0 	bne.w	8000e4e <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000cce:	4b64      	ldr	r3, [pc, #400]	@ (8000e60 <xTaskResumeAll+0x1d8>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 80bb 	beq.w	8000e4e <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000cd8:	e08a      	b.n	8000df0 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000cda:	4b62      	ldr	r3, [pc, #392]	@ (8000e64 <xTaskResumeAll+0x1dc>)
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	69fa      	ldr	r2, [r7, #28]
 8000cee:	6a12      	ldr	r2, [r2, #32]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	6a1b      	ldr	r3, [r3, #32]
 8000cf6:	69fa      	ldr	r2, [r7, #28]
 8000cf8:	69d2      	ldr	r2, [r2, #28]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	685a      	ldr	r2, [r3, #4]
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	3318      	adds	r3, #24
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d103      	bne.n	8000d10 <xTaskResumeAll+0x88>
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	6a1a      	ldr	r2, [r3, #32]
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	2200      	movs	r2, #0
 8000d14:	629a      	str	r2, [r3, #40]	@ 0x28
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	1e5a      	subs	r2, r3, #1
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	695b      	ldr	r3, [r3, #20]
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	69fa      	ldr	r2, [r7, #28]
 8000d2c:	68d2      	ldr	r2, [r2, #12]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	69fa      	ldr	r2, [r7, #28]
 8000d36:	6892      	ldr	r2, [r2, #8]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	685a      	ldr	r2, [r3, #4]
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d103      	bne.n	8000d4e <xTaskResumeAll+0xc6>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	68da      	ldr	r2, [r3, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	1e5a      	subs	r2, r3, #1
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d62:	2201      	movs	r2, #1
 8000d64:	409a      	lsls	r2, r3
 8000d66:	4b40      	ldr	r3, [pc, #256]	@ (8000e68 <xTaskResumeAll+0x1e0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	4a3e      	ldr	r2, [pc, #248]	@ (8000e68 <xTaskResumeAll+0x1e0>)
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d74:	493d      	ldr	r1, [pc, #244]	@ (8000e6c <xTaskResumeAll+0x1e4>)
 8000d76:	4613      	mov	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	440b      	add	r3, r1
 8000d80:	3304      	adds	r3, #4
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	68ba      	ldr	r2, [r7, #8]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	69fa      	ldr	r2, [r7, #28]
 8000d9a:	3204      	adds	r2, #4
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	1d1a      	adds	r2, r3, #4
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4a2e      	ldr	r2, [pc, #184]	@ (8000e6c <xTaskResumeAll+0x1e4>)
 8000db4:	441a      	add	r2, r3
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dbe:	492b      	ldr	r1, [pc, #172]	@ (8000e6c <xTaskResumeAll+0x1e4>)
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	440b      	add	r3, r1
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	1c59      	adds	r1, r3, #1
 8000dce:	4827      	ldr	r0, [pc, #156]	@ (8000e6c <xTaskResumeAll+0x1e4>)
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4403      	add	r3, r0
 8000dda:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000de0:	4b23      	ldr	r3, [pc, #140]	@ (8000e70 <xTaskResumeAll+0x1e8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d302      	bcc.n	8000df0 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8000dea:	4b22      	ldr	r3, [pc, #136]	@ (8000e74 <xTaskResumeAll+0x1ec>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000df0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <xTaskResumeAll+0x1dc>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f47f af70 	bne.w	8000cda <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000e00:	f000 fc26 	bl	8001650 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000e04:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <xTaskResumeAll+0x1f0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d010      	beq.n	8000e32 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000e10:	f000 f846 	bl	8000ea0 <xTaskIncrementTick>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d002      	beq.n	8000e20 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8000e1a:	4b16      	ldr	r3, [pc, #88]	@ (8000e74 <xTaskResumeAll+0x1ec>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1f1      	bne.n	8000e10 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <xTaskResumeAll+0x1f0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <xTaskResumeAll+0x1ec>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d009      	beq.n	8000e4e <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e7c <xTaskResumeAll+0x1f4>)
 8000e40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	f3bf 8f4f 	dsb	sy
 8000e4a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000e4e:	f001 f8a7 	bl	8001fa0 <vPortExitCritical>

    return xAlreadyYielded;
 8000e52:	69bb      	ldr	r3, [r7, #24]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3720      	adds	r7, #32
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000170 	.word	0x20000170
 8000e60:	20000148 	.word	0x20000148
 8000e64:	20000108 	.word	0x20000108
 8000e68:	20000150 	.word	0x20000150
 8000e6c:	20000074 	.word	0x20000074
 8000e70:	20000070 	.word	0x20000070
 8000e74:	2000015c 	.word	0x2000015c
 8000e78:	20000158 	.word	0x20000158
 8000e7c:	e000ed04 	.word	0xe000ed04

08000e80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000e86:	4b05      	ldr	r3, [pc, #20]	@ (8000e9c <xTaskGetTickCount+0x1c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	2000014c 	.word	0x2000014c

08000ea0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	@ 0x28
 8000ea4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000eaa:	4b7e      	ldr	r3, [pc, #504]	@ (80010a4 <xTaskIncrementTick+0x204>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 80ed 	bne.w	800108e <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000eb4:	4b7c      	ldr	r3, [pc, #496]	@ (80010a8 <xTaskIncrementTick+0x208>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000ebc:	4a7a      	ldr	r2, [pc, #488]	@ (80010a8 <xTaskIncrementTick+0x208>)
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8000ec2:	6a3b      	ldr	r3, [r7, #32]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d121      	bne.n	8000f0c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8000ec8:	4b78      	ldr	r3, [pc, #480]	@ (80010ac <xTaskIncrementTick+0x20c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <xTaskIncrementTick+0x4a>
        __asm volatile
 8000ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ed6:	f383 8811 	msr	BASEPRI, r3
 8000eda:	f3bf 8f6f 	isb	sy
 8000ede:	f3bf 8f4f 	dsb	sy
 8000ee2:	607b      	str	r3, [r7, #4]
    }
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	e7fd      	b.n	8000ee6 <xTaskIncrementTick+0x46>
 8000eea:	4b70      	ldr	r3, [pc, #448]	@ (80010ac <xTaskIncrementTick+0x20c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	61fb      	str	r3, [r7, #28]
 8000ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80010b0 <xTaskIncrementTick+0x210>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a6d      	ldr	r2, [pc, #436]	@ (80010ac <xTaskIncrementTick+0x20c>)
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4a6d      	ldr	r2, [pc, #436]	@ (80010b0 <xTaskIncrementTick+0x210>)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4b6d      	ldr	r3, [pc, #436]	@ (80010b4 <xTaskIncrementTick+0x214>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	4a6b      	ldr	r2, [pc, #428]	@ (80010b4 <xTaskIncrementTick+0x214>)
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	f000 fba2 	bl	8001650 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000f0c:	4b6a      	ldr	r3, [pc, #424]	@ (80010b8 <xTaskIncrementTick+0x218>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6a3a      	ldr	r2, [r7, #32]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	f0c0 80a6 	bcc.w	8001064 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000f18:	4b64      	ldr	r3, [pc, #400]	@ (80010ac <xTaskIncrementTick+0x20c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d104      	bne.n	8000f2c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f22:	4b65      	ldr	r3, [pc, #404]	@ (80010b8 <xTaskIncrementTick+0x218>)
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	601a      	str	r2, [r3, #0]
                    break;
 8000f2a:	e09b      	b.n	8001064 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f2c:	4b5f      	ldr	r3, [pc, #380]	@ (80010ac <xTaskIncrementTick+0x20c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8000f3c:	6a3a      	ldr	r2, [r7, #32]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d203      	bcs.n	8000f4c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000f44:	4a5c      	ldr	r2, [pc, #368]	@ (80010b8 <xTaskIncrementTick+0x218>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8000f4a:	e08b      	b.n	8001064 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	68d2      	ldr	r2, [r2, #12]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	6892      	ldr	r2, [r2, #8]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d103      	bne.n	8000f7a <xTaskIncrementTick+0xda>
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	68da      	ldr	r2, [r3, #12]
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	1e5a      	subs	r2, r3, #1
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d01e      	beq.n	8000fd0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	6a12      	ldr	r2, [r2, #32]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	69d2      	ldr	r2, [r2, #28]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	3318      	adds	r3, #24
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d103      	bne.n	8000fc0 <xTaskIncrementTick+0x120>
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1e5a      	subs	r2, r3, #1
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	4b38      	ldr	r3, [pc, #224]	@ (80010bc <xTaskIncrementTick+0x21c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	4a37      	ldr	r2, [pc, #220]	@ (80010bc <xTaskIncrementTick+0x21c>)
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fe6:	4936      	ldr	r1, [pc, #216]	@ (80010c0 <xTaskIncrementTick+0x220>)
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	3204      	adds	r2, #4
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	1d1a      	adds	r2, r3, #4
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4a26      	ldr	r2, [pc, #152]	@ (80010c0 <xTaskIncrementTick+0x220>)
 8001026:	441a      	add	r2, r3
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001030:	4923      	ldr	r1, [pc, #140]	@ (80010c0 <xTaskIncrementTick+0x220>)
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	1c59      	adds	r1, r3, #1
 8001040:	481f      	ldr	r0, [pc, #124]	@ (80010c0 <xTaskIncrementTick+0x220>)
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4403      	add	r3, r0
 800104c:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001052:	4b1c      	ldr	r3, [pc, #112]	@ (80010c4 <xTaskIncrementTick+0x224>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001058:	429a      	cmp	r2, r3
 800105a:	f67f af5d 	bls.w	8000f18 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800105e:	2301      	movs	r3, #1
 8001060:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001062:	e759      	b.n	8000f18 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001064:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <xTaskIncrementTick+0x224>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800106a:	4915      	ldr	r1, [pc, #84]	@ (80010c0 <xTaskIncrementTick+0x220>)
 800106c:	4613      	mov	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	440b      	add	r3, r1
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d901      	bls.n	8001080 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 800107c:	2301      	movs	r3, #1
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <xTaskIncrementTick+0x228>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d007      	beq.n	8001098 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8001088:	2301      	movs	r3, #1
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
 800108c:	e004      	b.n	8001098 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800108e:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <xTaskIncrementTick+0x22c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	4a0d      	ldr	r2, [pc, #52]	@ (80010cc <xTaskIncrementTick+0x22c>)
 8001096:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800109a:	4618      	mov	r0, r3
 800109c:	3728      	adds	r7, #40	@ 0x28
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000170 	.word	0x20000170
 80010a8:	2000014c 	.word	0x2000014c
 80010ac:	20000100 	.word	0x20000100
 80010b0:	20000104 	.word	0x20000104
 80010b4:	20000160 	.word	0x20000160
 80010b8:	20000168 	.word	0x20000168
 80010bc:	20000150 	.word	0x20000150
 80010c0:	20000074 	.word	0x20000074
 80010c4:	20000070 	.word	0x20000070
 80010c8:	2000015c 	.word	0x2000015c
 80010cc:	20000158 	.word	0x20000158

080010d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80010d6:	4b27      	ldr	r3, [pc, #156]	@ (8001174 <vTaskSwitchContext+0xa4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80010de:	4b26      	ldr	r3, [pc, #152]	@ (8001178 <vTaskSwitchContext+0xa8>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80010e4:	e040      	b.n	8001168 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80010e6:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <vTaskSwitchContext+0xa8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010ec:	4b23      	ldr	r3, [pc, #140]	@ (800117c <vTaskSwitchContext+0xac>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	fab3 f383 	clz	r3, r3
 80010f8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	f1c3 031f 	rsb	r3, r3, #31
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	491f      	ldr	r1, [pc, #124]	@ (8001180 <vTaskSwitchContext+0xb0>)
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10b      	bne.n	800112e <vTaskSwitchContext+0x5e>
        __asm volatile
 8001116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800111a:	f383 8811 	msr	BASEPRI, r3
 800111e:	f3bf 8f6f 	isb	sy
 8001122:	f3bf 8f4f 	dsb	sy
 8001126:	607b      	str	r3, [r7, #4]
    }
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	e7fd      	b.n	800112a <vTaskSwitchContext+0x5a>
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4a11      	ldr	r2, [pc, #68]	@ (8001180 <vTaskSwitchContext+0xb0>)
 800113a:	4413      	add	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	3308      	adds	r3, #8
 8001150:	429a      	cmp	r2, r3
 8001152:	d104      	bne.n	800115e <vTaskSwitchContext+0x8e>
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	4a07      	ldr	r2, [pc, #28]	@ (8001184 <vTaskSwitchContext+0xb4>)
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	371c      	adds	r7, #28
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	20000170 	.word	0x20000170
 8001178:	2000015c 	.word	0x2000015c
 800117c:	20000150 	.word	0x20000150
 8001180:	20000074 	.word	0x20000074
 8001184:	20000070 	.word	0x20000070

08001188 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10b      	bne.n	80011b0 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8001198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800119c:	f383 8811 	msr	BASEPRI, r3
 80011a0:	f3bf 8f6f 	isb	sy
 80011a4:	f3bf 8f4f 	dsb	sy
 80011a8:	60fb      	str	r3, [r7, #12]
    }
 80011aa:	bf00      	nop
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80011b0:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <vTaskPlaceOnEventList+0x48>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3318      	adds	r3, #24
 80011b6:	4619      	mov	r1, r3
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff f83e 	bl	800023a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80011be:	2101      	movs	r1, #1
 80011c0:	6838      	ldr	r0, [r7, #0]
 80011c2:	f000 fa7f 	bl	80016c4 <prvAddCurrentTaskToDelayedList>
}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000070 	.word	0x20000070

080011d4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10b      	bne.n	80011fe <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80011e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ea:	f383 8811 	msr	BASEPRI, r3
 80011ee:	f3bf 8f6f 	isb	sy
 80011f2:	f3bf 8f4f 	dsb	sy
 80011f6:	613b      	str	r3, [r7, #16]
    }
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	e7fd      	b.n	80011fa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	4b15      	ldr	r3, [pc, #84]	@ (800125c <vTaskPlaceOnEventListRestricted+0x88>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	61da      	str	r2, [r3, #28]
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <vTaskPlaceOnEventListRestricted+0x88>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	6892      	ldr	r2, [r2, #8]
 8001214:	621a      	str	r2, [r3, #32]
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <vTaskPlaceOnEventListRestricted+0x88>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	3218      	adds	r2, #24
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <vTaskPlaceOnEventListRestricted+0x88>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f103 0218 	add.w	r2, r3, #24
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <vTaskPlaceOnEventListRestricted+0x88>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	629a      	str	r2, [r3, #40]	@ 0x28
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	68b8      	ldr	r0, [r7, #8]
 8001250:	f000 fa38 	bl	80016c4 <prvAddCurrentTaskToDelayedList>
    }
 8001254:	bf00      	nop
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000070 	.word	0x20000070

08001260 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001260:	b480      	push	{r7}
 8001262:	b08b      	sub	sp, #44	@ 0x2c
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10b      	bne.n	800128e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8001276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800127a:	f383 8811 	msr	BASEPRI, r3
 800127e:	f3bf 8f6f 	isb	sy
 8001282:	f3bf 8f4f 	dsb	sy
 8001286:	60fb      	str	r3, [r7, #12]
    }
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	e7fd      	b.n	800128a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800128e:	6a3b      	ldr	r3, [r7, #32]
 8001290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	6a3a      	ldr	r2, [r7, #32]
 800129a:	6a12      	ldr	r2, [r2, #32]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	6a3a      	ldr	r2, [r7, #32]
 80012a4:	69d2      	ldr	r2, [r2, #28]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	6a3b      	ldr	r3, [r7, #32]
 80012ae:	3318      	adds	r3, #24
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d103      	bne.n	80012bc <xTaskRemoveFromEventList+0x5c>
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	6a1a      	ldr	r2, [r3, #32]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	6a3b      	ldr	r3, [r7, #32]
 80012be:	2200      	movs	r2, #0
 80012c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	1e5a      	subs	r2, r3, #1
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80012cc:	4b4a      	ldr	r3, [pc, #296]	@ (80013f8 <xTaskRemoveFromEventList+0x198>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d15e      	bne.n	8001392 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	6a3a      	ldr	r2, [r7, #32]
 80012e0:	68d2      	ldr	r2, [r2, #12]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	6a3a      	ldr	r2, [r7, #32]
 80012ea:	6892      	ldr	r2, [r2, #8]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	3304      	adds	r3, #4
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d103      	bne.n	8001302 <xTaskRemoveFromEventList+0xa2>
 80012fa:	6a3b      	ldr	r3, [r7, #32]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	1e5a      	subs	r2, r3, #1
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001316:	2201      	movs	r2, #1
 8001318:	409a      	lsls	r2, r3
 800131a:	4b38      	ldr	r3, [pc, #224]	@ (80013fc <xTaskRemoveFromEventList+0x19c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4313      	orrs	r3, r2
 8001320:	4a36      	ldr	r2, [pc, #216]	@ (80013fc <xTaskRemoveFromEventList+0x19c>)
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001328:	4935      	ldr	r1, [pc, #212]	@ (8001400 <xTaskRemoveFromEventList+0x1a0>)
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	440b      	add	r3, r1
 8001334:	3304      	adds	r3, #4
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	60da      	str	r2, [r3, #12]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	6a3a      	ldr	r2, [r7, #32]
 800134e:	3204      	adds	r2, #4
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	1d1a      	adds	r2, r3, #4
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4a26      	ldr	r2, [pc, #152]	@ (8001400 <xTaskRemoveFromEventList+0x1a0>)
 8001368:	441a      	add	r2, r3
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	615a      	str	r2, [r3, #20]
 800136e:	6a3b      	ldr	r3, [r7, #32]
 8001370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001372:	4923      	ldr	r1, [pc, #140]	@ (8001400 <xTaskRemoveFromEventList+0x1a0>)
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	1c59      	adds	r1, r3, #1
 8001382:	481f      	ldr	r0, [pc, #124]	@ (8001400 <xTaskRemoveFromEventList+0x1a0>)
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4403      	add	r3, r0
 800138e:	6019      	str	r1, [r3, #0]
 8001390:	e01b      	b.n	80013ca <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001392:	4b1c      	ldr	r3, [pc, #112]	@ (8001404 <xTaskRemoveFromEventList+0x1a4>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	61da      	str	r2, [r3, #28]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	621a      	str	r2, [r3, #32]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	6a3a      	ldr	r2, [r7, #32]
 80013ac:	3218      	adds	r2, #24
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	f103 0218 	add.w	r2, r3, #24
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	4a11      	ldr	r2, [pc, #68]	@ (8001404 <xTaskRemoveFromEventList+0x1a4>)
 80013be:	629a      	str	r2, [r3, #40]	@ 0x28
 80013c0:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <xTaskRemoveFromEventList+0x1a4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001404 <xTaskRemoveFromEventList+0x1a4>)
 80013c8:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <xTaskRemoveFromEventList+0x1a8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d905      	bls.n	80013e4 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80013d8:	2301      	movs	r3, #1
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80013dc:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <xTaskRemoveFromEventList+0x1ac>)
 80013de:	2201      	movs	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e001      	b.n	80013e8 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80013e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	372c      	adds	r7, #44	@ 0x2c
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000170 	.word	0x20000170
 80013fc:	20000150 	.word	0x20000150
 8001400:	20000074 	.word	0x20000074
 8001404:	20000108 	.word	0x20000108
 8001408:	20000070 	.word	0x20000070
 800140c:	2000015c 	.word	0x2000015c

08001410 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <vTaskInternalSetTimeOutState+0x24>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <vTaskInternalSetTimeOutState+0x28>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	605a      	str	r2, [r3, #4]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	20000160 	.word	0x20000160
 8001438:	2000014c 	.word	0x2000014c

0800143c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d10b      	bne.n	8001464 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800144c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001450:	f383 8811 	msr	BASEPRI, r3
 8001454:	f3bf 8f6f 	isb	sy
 8001458:	f3bf 8f4f 	dsb	sy
 800145c:	613b      	str	r3, [r7, #16]
    }
 800145e:	bf00      	nop
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10b      	bne.n	8001482 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800146a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800146e:	f383 8811 	msr	BASEPRI, r3
 8001472:	f3bf 8f6f 	isb	sy
 8001476:	f3bf 8f4f 	dsb	sy
 800147a:	60fb      	str	r3, [r7, #12]
    }
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	e7fd      	b.n	800147e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8001482:	f000 fd5b 	bl	8001f3c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <xTaskCheckForTimeOut+0xc8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149e:	d102      	bne.n	80014a6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	e026      	b.n	80014f4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <xTaskCheckForTimeOut+0xcc>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d00a      	beq.n	80014c8 <xTaskCheckForTimeOut+0x8c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d305      	bcc.n	80014c8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80014bc:	2301      	movs	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	e015      	b.n	80014f4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d20b      	bcs.n	80014ea <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	1ad2      	subs	r2, r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ff96 	bl	8001410 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	e004      	b.n	80014f4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80014f4:	f000 fd54 	bl	8001fa0 <vPortExitCritical>

    return xReturn;
 80014f8:	69fb      	ldr	r3, [r7, #28]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3720      	adds	r7, #32
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000014c 	.word	0x2000014c
 8001508:	20000160 	.word	0x20000160

0800150c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <vTaskMissedYield+0x14>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	2000015c 	.word	0x2000015c

08001524 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800152c:	f000 f852 	bl	80015d4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <prvIdleTask+0x28>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d9f9      	bls.n	800152c <prvIdleTask+0x8>
            {
                taskYIELD();
 8001538:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <prvIdleTask+0x2c>)
 800153a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	f3bf 8f4f 	dsb	sy
 8001544:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8001548:	e7f0      	b.n	800152c <prvIdleTask+0x8>
 800154a:	bf00      	nop
 800154c:	20000074 	.word	0x20000074
 8001550:	e000ed04 	.word	0xe000ed04

08001554 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	e00c      	b.n	800157a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4a12      	ldr	r2, [pc, #72]	@ (80015b4 <prvInitialiseTaskLists+0x60>)
 800156c:	4413      	add	r3, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe fe36 	bl	80001e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3301      	adds	r3, #1
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b04      	cmp	r3, #4
 800157e:	d9ef      	bls.n	8001560 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001580:	480d      	ldr	r0, [pc, #52]	@ (80015b8 <prvInitialiseTaskLists+0x64>)
 8001582:	f7fe fe2d 	bl	80001e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001586:	480d      	ldr	r0, [pc, #52]	@ (80015bc <prvInitialiseTaskLists+0x68>)
 8001588:	f7fe fe2a 	bl	80001e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <prvInitialiseTaskLists+0x6c>)
 800158e:	f7fe fe27 	bl	80001e0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001592:	480c      	ldr	r0, [pc, #48]	@ (80015c4 <prvInitialiseTaskLists+0x70>)
 8001594:	f7fe fe24 	bl	80001e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001598:	480b      	ldr	r0, [pc, #44]	@ (80015c8 <prvInitialiseTaskLists+0x74>)
 800159a:	f7fe fe21 	bl	80001e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800159e:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <prvInitialiseTaskLists+0x78>)
 80015a0:	4a05      	ldr	r2, [pc, #20]	@ (80015b8 <prvInitialiseTaskLists+0x64>)
 80015a2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <prvInitialiseTaskLists+0x7c>)
 80015a6:	4a05      	ldr	r2, [pc, #20]	@ (80015bc <prvInitialiseTaskLists+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000074 	.word	0x20000074
 80015b8:	200000d8 	.word	0x200000d8
 80015bc:	200000ec 	.word	0x200000ec
 80015c0:	20000108 	.word	0x20000108
 80015c4:	2000011c 	.word	0x2000011c
 80015c8:	20000134 	.word	0x20000134
 80015cc:	20000100 	.word	0x20000100
 80015d0:	20000104 	.word	0x20000104

080015d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80015da:	e019      	b.n	8001610 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80015dc:	f000 fcae 	bl	8001f3c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80015e0:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <prvCheckTasksWaitingTermination+0x50>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3304      	adds	r3, #4
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fe5d 	bl	80002ac <uxListRemove>
                --uxCurrentNumberOfTasks;
 80015f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <prvCheckTasksWaitingTermination+0x54>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001628 <prvCheckTasksWaitingTermination+0x54>)
 80015fa:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <prvCheckTasksWaitingTermination+0x58>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	3b01      	subs	r3, #1
 8001602:	4a0a      	ldr	r2, [pc, #40]	@ (800162c <prvCheckTasksWaitingTermination+0x58>)
 8001604:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8001606:	f000 fccb 	bl	8001fa0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f810 	bl	8001630 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <prvCheckTasksWaitingTermination+0x58>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1e1      	bne.n	80015dc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000011c 	.word	0x2000011c
 8001628:	20000148 	.word	0x20000148
 800162c:	20000130 	.word	0x20000130

08001630 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fe21 	bl	8002284 <vPortFree>
            vPortFree( pxTCB );
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fe1e 	bl	8002284 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001654:	4b0a      	ldr	r3, [pc, #40]	@ (8001680 <prvResetNextTaskUnblockTime+0x30>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d104      	bne.n	8001668 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <prvResetNextTaskUnblockTime+0x34>)
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001666:	e005      	b.n	8001674 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <prvResetNextTaskUnblockTime+0x30>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a04      	ldr	r2, [pc, #16]	@ (8001684 <prvResetNextTaskUnblockTime+0x34>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000100 	.word	0x20000100
 8001684:	20000168 	.word	0x20000168

08001688 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <xTaskGetSchedulerState+0x34>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001696:	2301      	movs	r3, #1
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	e008      	b.n	80016ae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <xTaskGetSchedulerState+0x38>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80016a4:	2302      	movs	r3, #2
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	e001      	b.n	80016ae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80016ae:	687b      	ldr	r3, [r7, #4]
    }
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	20000154 	.word	0x20000154
 80016c0:	20000170 	.word	0x20000170

080016c4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80016ce:	4b36      	ldr	r3, [pc, #216]	@ (80017a8 <prvAddCurrentTaskToDelayedList+0xe4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80016d4:	4b35      	ldr	r3, [pc, #212]	@ (80017ac <prvAddCurrentTaskToDelayedList+0xe8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3304      	adds	r3, #4
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fde6 	bl	80002ac <uxListRemove>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10b      	bne.n	80016fe <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80016e6:	4b31      	ldr	r3, [pc, #196]	@ (80017ac <prvAddCurrentTaskToDelayedList+0xe8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ec:	2201      	movs	r2, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	4b2e      	ldr	r3, [pc, #184]	@ (80017b0 <prvAddCurrentTaskToDelayedList+0xec>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4013      	ands	r3, r2
 80016fa:	4a2d      	ldr	r2, [pc, #180]	@ (80017b0 <prvAddCurrentTaskToDelayedList+0xec>)
 80016fc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001704:	d124      	bne.n	8001750 <prvAddCurrentTaskToDelayedList+0x8c>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d021      	beq.n	8001750 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800170c:	4b29      	ldr	r3, [pc, #164]	@ (80017b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b26      	ldr	r3, [pc, #152]	@ (80017ac <prvAddCurrentTaskToDelayedList+0xe8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	4b24      	ldr	r3, [pc, #144]	@ (80017ac <prvAddCurrentTaskToDelayedList+0xe8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	6892      	ldr	r2, [r2, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <prvAddCurrentTaskToDelayedList+0xe8>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	3204      	adds	r2, #4
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <prvAddCurrentTaskToDelayedList+0xe8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	1d1a      	adds	r2, r3, #4
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ac <prvAddCurrentTaskToDelayedList+0xe8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001740:	615a      	str	r2, [r3, #20]
 8001742:	4b1c      	ldr	r3, [pc, #112]	@ (80017b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	4a1a      	ldr	r2, [pc, #104]	@ (80017b4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800174e:	e026      	b.n	800179e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001758:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <prvAddCurrentTaskToDelayedList+0xe8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	429a      	cmp	r2, r3
 8001766:	d209      	bcs.n	800177c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001768:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <prvAddCurrentTaskToDelayedList+0xe8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	3304      	adds	r3, #4
 8001772:	4619      	mov	r1, r3
 8001774:	4610      	mov	r0, r2
 8001776:	f7fe fd60 	bl	800023a <vListInsert>
}
 800177a:	e010      	b.n	800179e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800177c:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <prvAddCurrentTaskToDelayedList+0xf8>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <prvAddCurrentTaskToDelayedList+0xe8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	3304      	adds	r3, #4
 8001786:	4619      	mov	r1, r3
 8001788:	4610      	mov	r0, r2
 800178a:	f7fe fd56 	bl	800023a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800178e:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d202      	bcs.n	800179e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001798:	4a09      	ldr	r2, [pc, #36]	@ (80017c0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6013      	str	r3, [r2, #0]
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000014c 	.word	0x2000014c
 80017ac:	20000070 	.word	0x20000070
 80017b0:	20000150 	.word	0x20000150
 80017b4:	20000134 	.word	0x20000134
 80017b8:	20000104 	.word	0x20000104
 80017bc:	20000100 	.word	0x20000100
 80017c0:	20000168 	.word	0x20000168

080017c4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80017ce:	f000 fa4f 	bl	8001c70 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80017d2:	4b12      	ldr	r3, [pc, #72]	@ (800181c <xTimerCreateTimerTask+0x58>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00b      	beq.n	80017f2 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <xTimerCreateTimerTask+0x5c>)
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	2302      	movs	r3, #2
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	2300      	movs	r3, #0
 80017e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017e8:	490e      	ldr	r1, [pc, #56]	@ (8001824 <xTimerCreateTimerTask+0x60>)
 80017ea:	480f      	ldr	r0, [pc, #60]	@ (8001828 <xTimerCreateTimerTask+0x64>)
 80017ec:	f7ff f880 	bl	80008f0 <xTaskCreate>
 80017f0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10b      	bne.n	8001810 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80017f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80017fc:	f383 8811 	msr	BASEPRI, r3
 8001800:	f3bf 8f6f 	isb	sy
 8001804:	f3bf 8f4f 	dsb	sy
 8001808:	603b      	str	r3, [r7, #0]
    }
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8001810:	687b      	ldr	r3, [r7, #4]
    }
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200001a4 	.word	0x200001a4
 8001820:	200001a8 	.word	0x200001a8
 8001824:	08003014 	.word	0x08003014
 8001828:	080018d1 	.word	0x080018d1

0800182c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001838:	e008      	b.n	800184c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	4413      	add	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	699a      	ldr	r2, [r3, #24]
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	18d1      	adds	r1, r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 f8df 	bl	8001a1c <prvInsertTimerInActiveList>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1ea      	bne.n	800183a <prvReloadTimer+0xe>
        }
    }
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800187a:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <prvProcessExpiredTimer+0x5c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3304      	adds	r3, #4
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fd0f 	bl	80002ac <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f7ff ffc3 	bl	800182c <prvReloadTimer>
 80018a6:	e008      	b.n	80018ba <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	4798      	blx	r3
    }
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000019c 	.word	0x2000019c

080018d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80018d8:	f107 0308 	add.w	r3, r7, #8
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 f859 	bl	8001994 <prvGetNextExpireTime>
 80018e2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4619      	mov	r1, r3
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f805 	bl	80018f8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80018ee:	f000 f8d7 	bl	8001aa0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80018f2:	bf00      	nop
 80018f4:	e7f0      	b.n	80018d8 <prvTimerTask+0x8>
	...

080018f8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001902:	f7ff f9b3 	bl	8000c6c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f866 	bl	80019dc <prvSampleTimeNow>
 8001910:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d130      	bne.n	800197a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10a      	bne.n	8001934 <prvProcessTimerOrBlockTask+0x3c>
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	429a      	cmp	r2, r3
 8001924:	d806      	bhi.n	8001934 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001926:	f7ff f9af 	bl	8000c88 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800192a:	68f9      	ldr	r1, [r7, #12]
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff9f 	bl	8001870 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001932:	e024      	b.n	800197e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d008      	beq.n	800194c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800193a:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <prvProcessTimerOrBlockTask+0x90>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <prvProcessTimerOrBlockTask+0x50>
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <prvProcessTimerOrBlockTask+0x52>
 8001948:	2300      	movs	r3, #0
 800194a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800194c:	4b0f      	ldr	r3, [pc, #60]	@ (800198c <prvProcessTimerOrBlockTask+0x94>)
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f7fe ff95 	bl	8000888 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800195e:	f7ff f993 	bl	8000c88 <xTaskResumeAll>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10a      	bne.n	800197e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001968:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <prvProcessTimerOrBlockTask+0x98>)
 800196a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	f3bf 8f4f 	dsb	sy
 8001974:	f3bf 8f6f 	isb	sy
    }
 8001978:	e001      	b.n	800197e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800197a:	f7ff f985 	bl	8000c88 <xTaskResumeAll>
    }
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200001a0 	.word	0x200001a0
 800198c:	200001a4 	.word	0x200001a4
 8001990:	e000ed04 	.word	0xe000ed04

08001994 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800199c:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <prvGetNextExpireTime+0x44>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <prvGetNextExpireTime+0x16>
 80019a6:	2201      	movs	r2, #1
 80019a8:	e000      	b.n	80019ac <prvGetNextExpireTime+0x18>
 80019aa:	2200      	movs	r2, #0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d105      	bne.n	80019c4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80019b8:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <prvGetNextExpireTime+0x44>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	e001      	b.n	80019c8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80019c8:	68fb      	ldr	r3, [r7, #12]
    }
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	2000019c 	.word	0x2000019c

080019dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80019e4:	f7ff fa4c 	bl	8000e80 <xTaskGetTickCount>
 80019e8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <prvSampleTimeNow+0x3c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d205      	bcs.n	8001a00 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80019f4:	f000 f916 	bl	8001c24 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e002      	b.n	8001a06 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001a06:	4a04      	ldr	r2, [pc, #16]	@ (8001a18 <prvSampleTimeNow+0x3c>)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    }
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200001ac 	.word	0x200001ac

08001a1c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d812      	bhi.n	8001a68 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	1ad2      	subs	r2, r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d302      	bcc.n	8001a56 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001a50:	2301      	movs	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e01b      	b.n	8001a8e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001a56:	4b10      	ldr	r3, [pc, #64]	@ (8001a98 <prvInsertTimerInActiveList+0x7c>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4610      	mov	r0, r2
 8001a62:	f7fe fbea 	bl	800023a <vListInsert>
 8001a66:	e012      	b.n	8001a8e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d206      	bcs.n	8001a7e <prvInsertTimerInActiveList+0x62>
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d302      	bcc.n	8001a7e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	e007      	b.n	8001a8e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001a7e:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <prvInsertTimerInActiveList+0x80>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	3304      	adds	r3, #4
 8001a86:	4619      	mov	r1, r3
 8001a88:	4610      	mov	r0, r2
 8001a8a:	f7fe fbd6 	bl	800023a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001a8e:	697b      	ldr	r3, [r7, #20]
    }
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200001a0 	.word	0x200001a0
 8001a9c:	2000019c 	.word	0x2000019c

08001aa0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001aa6:	e0a9      	b.n	8001bfc <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f2c0 80a6 	blt.w	8001bfc <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d004      	beq.n	8001ac6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fbf3 	bl	80002ac <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff87 	bl	80019dc <prvSampleTimeNow>
 8001ace:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	f200 808e 	bhi.w	8001bf6 <prvProcessReceivedCommands+0x156>
 8001ada:	a201      	add	r2, pc, #4	@ (adr r2, 8001ae0 <prvProcessReceivedCommands+0x40>)
 8001adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae0:	08001b05 	.word	0x08001b05
 8001ae4:	08001b05 	.word	0x08001b05
 8001ae8:	08001b6d 	.word	0x08001b6d
 8001aec:	08001b81 	.word	0x08001b81
 8001af0:	08001bcd 	.word	0x08001bcd
 8001af4:	08001b05 	.word	0x08001b05
 8001af8:	08001b05 	.word	0x08001b05
 8001afc:	08001b6d 	.word	0x08001b6d
 8001b00:	08001b81 	.word	0x08001b81
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	18d1      	adds	r1, r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	69f8      	ldr	r0, [r7, #28]
 8001b24:	f7ff ff7a 	bl	8001a1c <prvInsertTimerInActiveList>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d065      	beq.n	8001bfa <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d009      	beq.n	8001b50 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	4413      	add	r3, r2
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4619      	mov	r1, r3
 8001b48:	69f8      	ldr	r0, [r7, #28]
 8001b4a:	f7ff fe6f 	bl	800182c <prvReloadTimer>
 8001b4e:	e008      	b.n	8001b62 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b56:	f023 0301 	bic.w	r3, r3, #1
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	69f8      	ldr	r0, [r7, #28]
 8001b68:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8001b6a:	e046      	b.n	8001bfa <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	b2da      	uxtb	r2, r3
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8001b7e:	e03d      	b.n	8001bfc <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10b      	bne.n	8001bb8 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8001ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ba4:	f383 8811 	msr	BASEPRI, r3
 8001ba8:	f3bf 8f6f 	isb	sy
 8001bac:	f3bf 8f4f 	dsb	sy
 8001bb0:	617b      	str	r3, [r7, #20]
    }
 8001bb2:	bf00      	nop
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	699a      	ldr	r2, [r3, #24]
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	18d1      	adds	r1, r2, r3
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	69f8      	ldr	r0, [r7, #28]
 8001bc6:	f7ff ff29 	bl	8001a1c <prvInsertTimerInActiveList>
                        break;
 8001bca:	e017      	b.n	8001bfc <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d103      	bne.n	8001be2 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8001bda:	69f8      	ldr	r0, [r7, #28]
 8001bdc:	f000 fb52 	bl	8002284 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001be0:	e00c      	b.n	8001bfc <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8001bf4:	e002      	b.n	8001bfc <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8001bf6:	bf00      	nop
 8001bf8:	e000      	b.n	8001bfc <prvProcessReceivedCommands+0x15c>
                        break;
 8001bfa:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001bfc:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <prvProcessReceivedCommands+0x180>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f107 0108 	add.w	r1, r7, #8
 8001c04:	2200      	movs	r2, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fc7e 	bl	8000508 <xQueueReceive>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f47f af4a 	bne.w	8001aa8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3720      	adds	r7, #32
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200001a4 	.word	0x200001a4

08001c24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001c2a:	e009      	b.n	8001c40 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <prvSwitchTimerLists+0x44>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001c36:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3a:	6838      	ldr	r0, [r7, #0]
 8001c3c:	f7ff fe18 	bl	8001870 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001c40:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <prvSwitchTimerLists+0x44>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <prvSwitchTimerLists+0x44>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8001c50:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <prvSwitchTimerLists+0x48>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a04      	ldr	r2, [pc, #16]	@ (8001c68 <prvSwitchTimerLists+0x44>)
 8001c56:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001c58:	4a04      	ldr	r2, [pc, #16]	@ (8001c6c <prvSwitchTimerLists+0x48>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6013      	str	r3, [r2, #0]
    }
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000019c 	.word	0x2000019c
 8001c6c:	200001a0 	.word	0x200001a0

08001c70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001c74:	f000 f962 	bl	8001f3c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001c78:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <prvCheckForValidListAndQueue+0x54>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d11d      	bne.n	8001cbc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8001c80:	4811      	ldr	r0, [pc, #68]	@ (8001cc8 <prvCheckForValidListAndQueue+0x58>)
 8001c82:	f7fe faad 	bl	80001e0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001c86:	4811      	ldr	r0, [pc, #68]	@ (8001ccc <prvCheckForValidListAndQueue+0x5c>)
 8001c88:	f7fe faaa 	bl	80001e0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001c8c:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <prvCheckForValidListAndQueue+0x60>)
 8001c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc8 <prvCheckForValidListAndQueue+0x58>)
 8001c90:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001c92:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <prvCheckForValidListAndQueue+0x64>)
 8001c94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ccc <prvCheckForValidListAndQueue+0x5c>)
 8001c96:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001c98:	2200      	movs	r2, #0
 8001c9a:	210c      	movs	r1, #12
 8001c9c:	200a      	movs	r0, #10
 8001c9e:	f7fe fbc1 	bl	8000424 <xQueueGenericCreate>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a07      	ldr	r2, [pc, #28]	@ (8001cc4 <prvCheckForValidListAndQueue+0x54>)
 8001ca6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <prvCheckForValidListAndQueue+0x54>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8001cb0:	4b04      	ldr	r3, [pc, #16]	@ (8001cc4 <prvCheckForValidListAndQueue+0x54>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4908      	ldr	r1, [pc, #32]	@ (8001cd8 <prvCheckForValidListAndQueue+0x68>)
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fd96 	bl	80007e8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001cbc:	f000 f970 	bl	8001fa0 <vPortExitCritical>
    }
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200001a4 	.word	0x200001a4
 8001cc8:	20000174 	.word	0x20000174
 8001ccc:	20000188 	.word	0x20000188
 8001cd0:	2000019c 	.word	0x2000019c
 8001cd4:	200001a0 	.word	0x200001a0
 8001cd8:	0800301c 	.word	0x0800301c

08001cdc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3b04      	subs	r3, #4
 8001cec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001cf4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3b04      	subs	r3, #4
 8001cfa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f023 0201 	bic.w	r2, r3, #1
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3b04      	subs	r3, #4
 8001d0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001d0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d40 <pxPortInitialiseStack+0x64>)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3b14      	subs	r3, #20
 8001d16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3b04      	subs	r3, #4
 8001d22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f06f 0202 	mvn.w	r2, #2
 8001d2a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3b20      	subs	r3, #32
 8001d30:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	08001d45 	.word	0x08001d45

08001d44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001d4e:	4b13      	ldr	r3, [pc, #76]	@ (8001d9c <prvTaskExitError+0x58>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d56:	d00b      	beq.n	8001d70 <prvTaskExitError+0x2c>
        __asm volatile
 8001d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d5c:	f383 8811 	msr	BASEPRI, r3
 8001d60:	f3bf 8f6f 	isb	sy
 8001d64:	f3bf 8f4f 	dsb	sy
 8001d68:	60fb      	str	r3, [r7, #12]
    }
 8001d6a:	bf00      	nop
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <prvTaskExitError+0x28>
        __asm volatile
 8001d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d74:	f383 8811 	msr	BASEPRI, r3
 8001d78:	f3bf 8f6f 	isb	sy
 8001d7c:	f3bf 8f4f 	dsb	sy
 8001d80:	60bb      	str	r3, [r7, #8]
    }
 8001d82:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001d84:	bf00      	nop
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0fc      	beq.n	8001d86 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000004 	.word	0x20000004

08001da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001da0:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <pxCurrentTCBConst2>)
 8001da2:	6819      	ldr	r1, [r3, #0]
 8001da4:	6808      	ldr	r0, [r1, #0]
 8001da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001daa:	f380 8809 	msr	PSP, r0
 8001dae:	f3bf 8f6f 	isb	sy
 8001db2:	f04f 0000 	mov.w	r0, #0
 8001db6:	f380 8811 	msr	BASEPRI, r0
 8001dba:	4770      	bx	lr
 8001dbc:	f3af 8000 	nop.w

08001dc0 <pxCurrentTCBConst2>:
 8001dc0:	20000070 	.word	0x20000070
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop

08001dc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001dc8:	4808      	ldr	r0, [pc, #32]	@ (8001dec <prvPortStartFirstTask+0x24>)
 8001dca:	6800      	ldr	r0, [r0, #0]
 8001dcc:	6800      	ldr	r0, [r0, #0]
 8001dce:	f380 8808 	msr	MSP, r0
 8001dd2:	f04f 0000 	mov.w	r0, #0
 8001dd6:	f380 8814 	msr	CONTROL, r0
 8001dda:	b662      	cpsie	i
 8001ddc:	b661      	cpsie	f
 8001dde:	f3bf 8f4f 	dsb	sy
 8001de2:	f3bf 8f6f 	isb	sy
 8001de6:	df00      	svc	0
 8001de8:	bf00      	nop
 8001dea:	0000      	.short	0x0000
 8001dec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop

08001df4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001dfa:	4b47      	ldr	r3, [pc, #284]	@ (8001f18 <xPortStartScheduler+0x124>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a47      	ldr	r2, [pc, #284]	@ (8001f1c <xPortStartScheduler+0x128>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d10b      	bne.n	8001e1c <xPortStartScheduler+0x28>
        __asm volatile
 8001e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e08:	f383 8811 	msr	BASEPRI, r3
 8001e0c:	f3bf 8f6f 	isb	sy
 8001e10:	f3bf 8f4f 	dsb	sy
 8001e14:	613b      	str	r3, [r7, #16]
    }
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001e1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f18 <xPortStartScheduler+0x124>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a3f      	ldr	r2, [pc, #252]	@ (8001f20 <xPortStartScheduler+0x12c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10b      	bne.n	8001e3e <xPortStartScheduler+0x4a>
        __asm volatile
 8001e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e2a:	f383 8811 	msr	BASEPRI, r3
 8001e2e:	f3bf 8f6f 	isb	sy
 8001e32:	f3bf 8f4f 	dsb	sy
 8001e36:	60fb      	str	r3, [r7, #12]
    }
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	e7fd      	b.n	8001e3a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001e3e:	4b39      	ldr	r3, [pc, #228]	@ (8001f24 <xPortStartScheduler+0x130>)
 8001e40:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	22ff      	movs	r2, #255	@ 0xff
 8001e4e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4b31      	ldr	r3, [pc, #196]	@ (8001f28 <xPortStartScheduler+0x134>)
 8001e64:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001e66:	4b31      	ldr	r3, [pc, #196]	@ (8001f2c <xPortStartScheduler+0x138>)
 8001e68:	2207      	movs	r2, #7
 8001e6a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e6c:	e009      	b.n	8001e82 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8001e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f2c <xPortStartScheduler+0x138>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	4a2d      	ldr	r2, [pc, #180]	@ (8001f2c <xPortStartScheduler+0x138>)
 8001e76:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8a:	2b80      	cmp	r3, #128	@ 0x80
 8001e8c:	d0ef      	beq.n	8001e6e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001e8e:	4b27      	ldr	r3, [pc, #156]	@ (8001f2c <xPortStartScheduler+0x138>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f1c3 0307 	rsb	r3, r3, #7
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d00b      	beq.n	8001eb2 <xPortStartScheduler+0xbe>
        __asm volatile
 8001e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e9e:	f383 8811 	msr	BASEPRI, r3
 8001ea2:	f3bf 8f6f 	isb	sy
 8001ea6:	f3bf 8f4f 	dsb	sy
 8001eaa:	60bb      	str	r3, [r7, #8]
    }
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	e7fd      	b.n	8001eae <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f2c <xPortStartScheduler+0x138>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f2c <xPortStartScheduler+0x138>)
 8001eba:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f2c <xPortStartScheduler+0x138>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ec4:	4a19      	ldr	r2, [pc, #100]	@ (8001f2c <xPortStartScheduler+0x138>)
 8001ec6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001ed0:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <xPortStartScheduler+0x13c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a16      	ldr	r2, [pc, #88]	@ (8001f30 <xPortStartScheduler+0x13c>)
 8001ed6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001eda:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001edc:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <xPortStartScheduler+0x13c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a13      	ldr	r2, [pc, #76]	@ (8001f30 <xPortStartScheduler+0x13c>)
 8001ee2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8001ee6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001ee8:	f000 f8e0 	bl	80020ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001eec:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <xPortStartScheduler+0x140>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8001ef2:	f000 f8ff 	bl	80020f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <xPortStartScheduler+0x144>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a0f      	ldr	r2, [pc, #60]	@ (8001f38 <xPortStartScheduler+0x144>)
 8001efc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8001f00:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8001f02:	f7ff ff61 	bl	8001dc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001f06:	f7ff f8e3 	bl	80010d0 <vTaskSwitchContext>
    prvTaskExitError();
 8001f0a:	f7ff ff1b 	bl	8001d44 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	e000ed00 	.word	0xe000ed00
 8001f1c:	410fc271 	.word	0x410fc271
 8001f20:	410fc270 	.word	0x410fc270
 8001f24:	e000e400 	.word	0xe000e400
 8001f28:	200001b0 	.word	0x200001b0
 8001f2c:	200001b4 	.word	0x200001b4
 8001f30:	e000ed20 	.word	0xe000ed20
 8001f34:	20000004 	.word	0x20000004
 8001f38:	e000ef34 	.word	0xe000ef34

08001f3c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
        __asm volatile
 8001f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f46:	f383 8811 	msr	BASEPRI, r3
 8001f4a:	f3bf 8f6f 	isb	sy
 8001f4e:	f3bf 8f4f 	dsb	sy
 8001f52:	607b      	str	r3, [r7, #4]
    }
 8001f54:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8001f56:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <vPortEnterCritical+0x5c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f98 <vPortEnterCritical+0x5c>)
 8001f5e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8001f60:	4b0d      	ldr	r3, [pc, #52]	@ (8001f98 <vPortEnterCritical+0x5c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d110      	bne.n	8001f8a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001f68:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <vPortEnterCritical+0x60>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <vPortEnterCritical+0x4e>
        __asm volatile
 8001f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f76:	f383 8811 	msr	BASEPRI, r3
 8001f7a:	f3bf 8f6f 	isb	sy
 8001f7e:	f3bf 8f4f 	dsb	sy
 8001f82:	603b      	str	r3, [r7, #0]
    }
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	e7fd      	b.n	8001f86 <vPortEnterCritical+0x4a>
    }
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	20000004 	.word	0x20000004
 8001f9c:	e000ed04 	.word	0xe000ed04

08001fa0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8001fa6:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <vPortExitCritical+0x50>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10b      	bne.n	8001fc6 <vPortExitCritical+0x26>
        __asm volatile
 8001fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fb2:	f383 8811 	msr	BASEPRI, r3
 8001fb6:	f3bf 8f6f 	isb	sy
 8001fba:	f3bf 8f4f 	dsb	sy
 8001fbe:	607b      	str	r3, [r7, #4]
    }
 8001fc0:	bf00      	nop
 8001fc2:	bf00      	nop
 8001fc4:	e7fd      	b.n	8001fc2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff0 <vPortExitCritical+0x50>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	4a08      	ldr	r2, [pc, #32]	@ (8001ff0 <vPortExitCritical+0x50>)
 8001fce:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001fd0:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <vPortExitCritical+0x50>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d105      	bne.n	8001fe4 <vPortExitCritical+0x44>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001fe2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	20000004 	.word	0x20000004
	...

08002000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002000:	f3ef 8009 	mrs	r0, PSP
 8002004:	f3bf 8f6f 	isb	sy
 8002008:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <pxCurrentTCBConst>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	f01e 0f10 	tst.w	lr, #16
 8002010:	bf08      	it	eq
 8002012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800201a:	6010      	str	r0, [r2, #0]
 800201c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002020:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002024:	f380 8811 	msr	BASEPRI, r0
 8002028:	f3bf 8f4f 	dsb	sy
 800202c:	f3bf 8f6f 	isb	sy
 8002030:	f7ff f84e 	bl	80010d0 <vTaskSwitchContext>
 8002034:	f04f 0000 	mov.w	r0, #0
 8002038:	f380 8811 	msr	BASEPRI, r0
 800203c:	bc09      	pop	{r0, r3}
 800203e:	6819      	ldr	r1, [r3, #0]
 8002040:	6808      	ldr	r0, [r1, #0]
 8002042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002046:	f01e 0f10 	tst.w	lr, #16
 800204a:	bf08      	it	eq
 800204c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002050:	f380 8809 	msr	PSP, r0
 8002054:	f3bf 8f6f 	isb	sy
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	f3af 8000 	nop.w

08002060 <pxCurrentTCBConst>:
 8002060:	20000070 	.word	0x20000070
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop

08002068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
        __asm volatile
 800206e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002072:	f383 8811 	msr	BASEPRI, r3
 8002076:	f3bf 8f6f 	isb	sy
 800207a:	f3bf 8f4f 	dsb	sy
 800207e:	607b      	str	r3, [r7, #4]
    }
 8002080:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002082:	f7fe ff0d 	bl	8000ea0 <xTaskIncrementTick>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <SysTick_Handler+0x40>)
 800208e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	2300      	movs	r3, #0
 8002096:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	f383 8811 	msr	BASEPRI, r3
    }
 800209e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	e000ed04 	.word	0xe000ed04

080020ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80020b0:	4b0b      	ldr	r3, [pc, #44]	@ (80020e0 <vPortSetupTimerInterrupt+0x34>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	@ (80020e4 <vPortSetupTimerInterrupt+0x38>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80020bc:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <vPortSetupTimerInterrupt+0x3c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a0a      	ldr	r2, [pc, #40]	@ (80020ec <vPortSetupTimerInterrupt+0x40>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	099b      	lsrs	r3, r3, #6
 80020c8:	4a09      	ldr	r2, [pc, #36]	@ (80020f0 <vPortSetupTimerInterrupt+0x44>)
 80020ca:	3b01      	subs	r3, #1
 80020cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80020ce:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <vPortSetupTimerInterrupt+0x34>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010
 80020e4:	e000e018 	.word	0xe000e018
 80020e8:	20000010 	.word	0x20000010
 80020ec:	10624dd3 	.word	0x10624dd3
 80020f0:	e000e014 	.word	0xe000e014

080020f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80020f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002104 <vPortEnableVFP+0x10>
 80020f8:	6801      	ldr	r1, [r0, #0]
 80020fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80020fe:	6001      	str	r1, [r0, #0]
 8002100:	4770      	bx	lr
 8002102:	0000      	.short	0x0000
 8002104:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop

0800210c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	@ 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002114:	2300      	movs	r3, #0
 8002116:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002118:	f7fe fda8 	bl	8000c6c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800211c:	4b54      	ldr	r3, [pc, #336]	@ (8002270 <pvPortMalloc+0x164>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002124:	f000 f90c 	bl	8002340 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d012      	beq.n	8002154 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800212e:	2208      	movs	r2, #8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	3308      	adds	r3, #8
 800213a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	43db      	mvns	r3, r3
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	d804      	bhi.n	8002150 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	4413      	add	r3, r2
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	e001      	b.n	8002154 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	db71      	blt.n	800223e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d06e      	beq.n	800223e <pvPortMalloc+0x132>
 8002160:	4b44      	ldr	r3, [pc, #272]	@ (8002274 <pvPortMalloc+0x168>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	429a      	cmp	r2, r3
 8002168:	d869      	bhi.n	800223e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800216a:	4b43      	ldr	r3, [pc, #268]	@ (8002278 <pvPortMalloc+0x16c>)
 800216c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800216e:	4b42      	ldr	r3, [pc, #264]	@ (8002278 <pvPortMalloc+0x16c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002174:	e004      	b.n	8002180 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	429a      	cmp	r2, r3
 8002188:	d903      	bls.n	8002192 <pvPortMalloc+0x86>
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f1      	bne.n	8002176 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002192:	4b37      	ldr	r3, [pc, #220]	@ (8002270 <pvPortMalloc+0x164>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002198:	429a      	cmp	r2, r3
 800219a:	d050      	beq.n	800223e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2208      	movs	r2, #8
 80021a2:	4413      	add	r3, r2
 80021a4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	1ad2      	subs	r2, r2, r3
 80021b6:	2308      	movs	r3, #8
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d920      	bls.n	8002200 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80021be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00b      	beq.n	80021e8 <pvPortMalloc+0xdc>
        __asm volatile
 80021d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d4:	f383 8811 	msr	BASEPRI, r3
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	613b      	str	r3, [r7, #16]
    }
 80021e2:	bf00      	nop
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	1ad2      	subs	r2, r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f000 f8fc 	bl	80023f8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002200:	4b1c      	ldr	r3, [pc, #112]	@ (8002274 <pvPortMalloc+0x168>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	4a1a      	ldr	r2, [pc, #104]	@ (8002274 <pvPortMalloc+0x168>)
 800220c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800220e:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <pvPortMalloc+0x168>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b1a      	ldr	r3, [pc, #104]	@ (800227c <pvPortMalloc+0x170>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d203      	bcs.n	8002222 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800221a:	4b16      	ldr	r3, [pc, #88]	@ (8002274 <pvPortMalloc+0x168>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a17      	ldr	r2, [pc, #92]	@ (800227c <pvPortMalloc+0x170>)
 8002220:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002234:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <pvPortMalloc+0x174>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	3301      	adds	r3, #1
 800223a:	4a11      	ldr	r2, [pc, #68]	@ (8002280 <pvPortMalloc+0x174>)
 800223c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800223e:	f7fe fd23 	bl	8000c88 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00b      	beq.n	8002264 <pvPortMalloc+0x158>
        __asm volatile
 800224c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002250:	f383 8811 	msr	BASEPRI, r3
 8002254:	f3bf 8f6f 	isb	sy
 8002258:	f3bf 8f4f 	dsb	sy
 800225c:	60fb      	str	r3, [r7, #12]
    }
 800225e:	bf00      	nop
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <pvPortMalloc+0x154>
    return pvReturn;
 8002264:	69fb      	ldr	r3, [r7, #28]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3728      	adds	r7, #40	@ 0x28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20012dc0 	.word	0x20012dc0
 8002274:	20012dc4 	.word	0x20012dc4
 8002278:	20012db8 	.word	0x20012db8
 800227c:	20012dc8 	.word	0x20012dc8
 8002280:	20012dcc 	.word	0x20012dcc

08002284 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d04b      	beq.n	800232e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002296:	2308      	movs	r3, #8
 8002298:	425b      	negs	r3, r3
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4413      	add	r3, r2
 800229e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0b      	blt.n	80022c4 <vPortFree+0x40>
        __asm volatile
 80022ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	60fb      	str	r3, [r7, #12]
    }
 80022be:	bf00      	nop
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00b      	beq.n	80022e4 <vPortFree+0x60>
        __asm volatile
 80022cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d0:	f383 8811 	msr	BASEPRI, r3
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	60bb      	str	r3, [r7, #8]
    }
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	0fdb      	lsrs	r3, r3, #31
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01c      	beq.n	800232e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d118      	bne.n	800232e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002308:	f7fe fcb0 	bl	8000c6c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <vPortFree+0xb4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4413      	add	r3, r2
 8002316:	4a08      	ldr	r2, [pc, #32]	@ (8002338 <vPortFree+0xb4>)
 8002318:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800231a:	6938      	ldr	r0, [r7, #16]
 800231c:	f000 f86c 	bl	80023f8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002320:	4b06      	ldr	r3, [pc, #24]	@ (800233c <vPortFree+0xb8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3301      	adds	r3, #1
 8002326:	4a05      	ldr	r2, [pc, #20]	@ (800233c <vPortFree+0xb8>)
 8002328:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800232a:	f7fe fcad 	bl	8000c88 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20012dc4 	.word	0x20012dc4
 800233c:	20012dd0 	.word	0x20012dd0

08002340 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002346:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800234a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800234c:	4b25      	ldr	r3, [pc, #148]	@ (80023e4 <prvHeapInit+0xa4>)
 800234e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00c      	beq.n	8002374 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3307      	adds	r3, #7
 800235e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0307 	bic.w	r3, r3, #7
 8002366:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	4a1d      	ldr	r2, [pc, #116]	@ (80023e4 <prvHeapInit+0xa4>)
 8002370:	4413      	add	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002378:	4a1b      	ldr	r2, [pc, #108]	@ (80023e8 <prvHeapInit+0xa8>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800237e:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <prvHeapInit+0xa8>)
 8002380:	2200      	movs	r2, #0
 8002382:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	4413      	add	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800238c:	2208      	movs	r2, #8
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f023 0307 	bic.w	r3, r3, #7
 800239a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	4a13      	ldr	r2, [pc, #76]	@ (80023ec <prvHeapInit+0xac>)
 80023a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80023a2:	4b12      	ldr	r3, [pc, #72]	@ (80023ec <prvHeapInit+0xac>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2200      	movs	r2, #0
 80023a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80023aa:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <prvHeapInit+0xac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80023c0:	4b0a      	ldr	r3, [pc, #40]	@ (80023ec <prvHeapInit+0xac>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4a08      	ldr	r2, [pc, #32]	@ (80023f0 <prvHeapInit+0xb0>)
 80023ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a07      	ldr	r2, [pc, #28]	@ (80023f4 <prvHeapInit+0xb4>)
 80023d6:	6013      	str	r3, [r2, #0]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	200001b8 	.word	0x200001b8
 80023e8:	20012db8 	.word	0x20012db8
 80023ec:	20012dc0 	.word	0x20012dc0
 80023f0:	20012dc8 	.word	0x20012dc8
 80023f4:	20012dc4 	.word	0x20012dc4

080023f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002400:	4b28      	ldr	r3, [pc, #160]	@ (80024a4 <prvInsertBlockIntoFreeList+0xac>)
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	e002      	b.n	800240c <prvInsertBlockIntoFreeList+0x14>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	429a      	cmp	r2, r3
 8002414:	d8f7      	bhi.n	8002406 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	4413      	add	r3, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	d108      	bne.n	800243a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	441a      	add	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	441a      	add	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d118      	bne.n	8002480 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <prvInsertBlockIntoFreeList+0xb0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d00d      	beq.n	8002476 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	441a      	add	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	e008      	b.n	8002488 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002476:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <prvInsertBlockIntoFreeList+0xb0>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e003      	b.n	8002488 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	429a      	cmp	r2, r3
 800248e:	d002      	beq.n	8002496 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002496:	bf00      	nop
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20012db8 	.word	0x20012db8
 80024a8:	20012dc0 	.word	0x20012dc0

080024ac <EXTI9_5_IRQHandler>:
USART_HandlerTypedef USART_Handle;

uint32_t accesss = 1;
uint32_t accesss2 = 1;

void EXTI9_5_IRQHandler(){
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
	if(EXTI->PR & 0x40){
 80024b0:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <EXTI9_5_IRQHandler+0x2c>)
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <EXTI9_5_IRQHandler+0x26>
		EXTI->PR |= (0x1U << 6U);
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <EXTI9_5_IRQHandler+0x2c>)
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	4a05      	ldr	r2, [pc, #20]	@ (80024d8 <EXTI9_5_IRQHandler+0x2c>)
 80024c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024c6:	6153      	str	r3, [r2, #20]
		GPIO_Write_Pin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80024c8:	2201      	movs	r2, #1
 80024ca:	2120      	movs	r1, #32
 80024cc:	4803      	ldr	r0, [pc, #12]	@ (80024dc <EXTI9_5_IRQHandler+0x30>)
 80024ce:	f000 faa9 	bl	8002a24 <GPIO_Write_Pin>
	}
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40013c00 	.word	0x40013c00
 80024dc:	40020800 	.word	0x40020800

080024e0 <main>:

int main(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af02      	add	r7, sp, #8
    GPIO_LedConfig();
 80024e6:	f000 f82b 	bl	8002540 <GPIO_LedConfig>

    GPIO_InterruptConfig();
 80024ea:	f000 f887 	bl	80025fc <GPIO_InterruptConfig>

    //SPI_GPIO_Config();

    //SPI_Config();

    USART_GPIO_Config();
 80024ee:	f000 f8eb 	bl	80026c8 <USART_GPIO_Config>

    USART_Config();
 80024f2:	f000 f8af 	bl	8002654 <USART_Config>

    //SPI_TransmitData(&SPI_Handle, (uint8_t*)msgtosend, sizeof(msgtosend));



    xTaskCreate(Task1_Handler, "Task1", 128, NULL, 4, &MyTask1_Handle);
 80024f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002528 <main+0x48>)
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	2304      	movs	r3, #4
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2300      	movs	r3, #0
 8002500:	2280      	movs	r2, #128	@ 0x80
 8002502:	490a      	ldr	r1, [pc, #40]	@ (800252c <main+0x4c>)
 8002504:	480a      	ldr	r0, [pc, #40]	@ (8002530 <main+0x50>)
 8002506:	f7fe f9f3 	bl	80008f0 <xTaskCreate>
    xTaskCreate(Task2_Handler, "Task2", 128, NULL, 4, &MyTask2_Handle);
 800250a:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <main+0x54>)
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	2304      	movs	r3, #4
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	2300      	movs	r3, #0
 8002514:	2280      	movs	r2, #128	@ 0x80
 8002516:	4908      	ldr	r1, [pc, #32]	@ (8002538 <main+0x58>)
 8002518:	4808      	ldr	r0, [pc, #32]	@ (800253c <main+0x5c>)
 800251a:	f7fe f9e9 	bl	80008f0 <xTaskCreate>

    vTaskStartScheduler();
 800251e:	f7fe fb53 	bl	8000bc8 <vTaskStartScheduler>

	for(;;){
 8002522:	bf00      	nop
 8002524:	e7fd      	b.n	8002522 <main+0x42>
 8002526:	bf00      	nop
 8002528:	20012dd4 	.word	0x20012dd4
 800252c:	08003024 	.word	0x08003024
 8002530:	0800272d 	.word	0x0800272d
 8002534:	20012dd8 	.word	0x20012dd8
 8002538:	0800302c 	.word	0x0800302c
 800253c:	08002785 	.word	0x08002785

08002540 <GPIO_LedConfig>:
	}
}

void GPIO_LedConfig(){
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
	GPIO_InitTypedef deneme = {0};
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
 8002554:	615a      	str	r2, [r3, #20]

	RCC_GPIOC_CLCK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	4b1a      	ldr	r3, [pc, #104]	@ (80025c4 <GPIO_LedConfig+0x84>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	4a19      	ldr	r2, [pc, #100]	@ (80025c4 <GPIO_LedConfig+0x84>)
 8002560:	f043 0304 	orr.w	r3, r3, #4
 8002564:	6313      	str	r3, [r2, #48]	@ 0x30
 8002566:	4b17      	ldr	r3, [pc, #92]	@ (80025c4 <GPIO_LedConfig+0x84>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	61fb      	str	r3, [r7, #28]

	deneme.mode = GPIO_MODER_OUTPUT;
 8002570:	2301      	movs	r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
	deneme.otype = GPIO_OTYPER_PP;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
	deneme.pinnumber=GPIO_PIN_5;
 8002578:	2320      	movs	r3, #32
 800257a:	607b      	str	r3, [r7, #4]
	deneme.pupd = GPIO_PUPD_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]
	deneme.speed = GPIO_OSPEED_LOW;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]

	GPIO_Init(GPIOC, &deneme);
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	4619      	mov	r1, r3
 8002588:	480f      	ldr	r0, [pc, #60]	@ (80025c8 <GPIO_LedConfig+0x88>)
 800258a:	f000 fa64 	bl	8002a56 <GPIO_Init>

	memset(&deneme,0,sizeof(deneme));
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	2218      	movs	r2, #24
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fcf2 	bl	8002f7e <memset>

	deneme.mode = GPIO_MODER_INPUT;
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
	deneme.pinnumber = GPIO_PIN_6;
 800259e:	2340      	movs	r3, #64	@ 0x40
 80025a0:	607b      	str	r3, [r7, #4]
	deneme.pupd = GPIO_PUPD_PULLDOWN;
 80025a2:	2302      	movs	r3, #2
 80025a4:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOC, &deneme);
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	4619      	mov	r1, r3
 80025aa:	4807      	ldr	r0, [pc, #28]	@ (80025c8 <GPIO_LedConfig+0x88>)
 80025ac:	f000 fa53 	bl	8002a56 <GPIO_Init>

	memset(&deneme,0,sizeof(deneme));
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	2218      	movs	r2, #24
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fce1 	bl	8002f7e <memset>
}
 80025bc:	bf00      	nop
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40020800 	.word	0x40020800

080025cc <delay>:

void delay(uint32_t time){
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	time = time*12;
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	607b      	str	r3, [r7, #4]
	while(time--);
 80025e0:	bf00      	nop
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	1e5a      	subs	r2, r3, #1
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1fa      	bne.n	80025e2 <delay+0x16>
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
	...

080025fc <GPIO_InterruptConfig>:

void GPIO_InterruptConfig(){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
	EXTI_IniTypedef interruptdeneme = {0};
 8002602:	2300      	movs	r3, #0
 8002604:	603b      	str	r3, [r7, #0]

	RCC_SYSCFG_CLCK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <GPIO_InterruptConfig+0x54>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260e:	4a10      	ldr	r2, [pc, #64]	@ (8002650 <GPIO_InterruptConfig+0x54>)
 8002610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002614:	6453      	str	r3, [r2, #68]	@ 0x44
 8002616:	4b0e      	ldr	r3, [pc, #56]	@ (8002650 <GPIO_InterruptConfig+0x54>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800261e:	607b      	str	r3, [r7, #4]
	EXTI_LineConfig(EXTI_PortSource_GPIOC, EXTI_LineSource_6);
 8002620:	2106      	movs	r1, #6
 8002622:	2002      	movs	r0, #2
 8002624:	f000 f904 	bl	8002830 <EXTI_LineConfig>

	interruptdeneme.EXTILineCmd = ENABLE;
 8002628:	2301      	movs	r3, #1
 800262a:	703b      	strb	r3, [r7, #0]
	interruptdeneme.EXTI_LineNumber = EXTI_LineSource_6;
 800262c:	2306      	movs	r3, #6
 800262e:	707b      	strb	r3, [r7, #1]
	interruptdeneme.EXTI_Mode = EXTI_MODE_Interrupt;
 8002630:	2300      	movs	r3, #0
 8002632:	70fb      	strb	r3, [r7, #3]
	interruptdeneme.TriggerSelection = EXTI_Trigger_Rising;
 8002634:	2308      	movs	r3, #8
 8002636:	70bb      	strb	r3, [r7, #2]

	EXTI_Init(&interruptdeneme);
 8002638:	463b      	mov	r3, r7
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f92c 	bl	8002898 <EXTI_Init>

	NVIC_EnableInterrupt(EXTI9_5_IRQNumber);
 8002640:	2017      	movs	r0, #23
 8002642:	f000 f9b9 	bl	80029b8 <NVIC_EnableInterrupt>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800

08002654 <USART_Config>:
	GPIO_InitStruct.alternate=GPIO_AF5;

	GPIO_Init(GPIOA,&GPIO_InitStruct);
}

void USART_Config(void){
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0

	RCC_USART2_CLCK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	4b17      	ldr	r3, [pc, #92]	@ (80026bc <USART_Config+0x68>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	4a16      	ldr	r2, [pc, #88]	@ (80026bc <USART_Config+0x68>)
 8002664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002668:	6413      	str	r3, [r2, #64]	@ 0x40
 800266a:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <USART_Config+0x68>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002672:	607b      	str	r3, [r7, #4]

	USART_Handle.Instance = USART2;
 8002674:	4b12      	ldr	r3, [pc, #72]	@ (80026c0 <USART_Config+0x6c>)
 8002676:	4a13      	ldr	r2, [pc, #76]	@ (80026c4 <USART_Config+0x70>)
 8002678:	601a      	str	r2, [r3, #0]
	USART_Handle.Init.BaudRate = 9600;
 800267a:	4b11      	ldr	r3, [pc, #68]	@ (80026c0 <USART_Config+0x6c>)
 800267c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002680:	605a      	str	r2, [r3, #4]
	USART_Handle.Init.HardWareFlowControl = USART_HW_NONE;
 8002682:	4b0f      	ldr	r3, [pc, #60]	@ (80026c0 <USART_Config+0x6c>)
 8002684:	2200      	movs	r2, #0
 8002686:	619a      	str	r2, [r3, #24]
	USART_Handle.Init.Mode = USART_MODE_TX;
 8002688:	4b0d      	ldr	r3, [pc, #52]	@ (80026c0 <USART_Config+0x6c>)
 800268a:	2208      	movs	r2, #8
 800268c:	61da      	str	r2, [r3, #28]
	USART_Handle.Init.OverSampling = USART_OVERSAMPLE_16;
 800268e:	4b0c      	ldr	r3, [pc, #48]	@ (80026c0 <USART_Config+0x6c>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
	USART_Handle.Init.Parity = USART_PARITY_NONE;
 8002694:	4b0a      	ldr	r3, [pc, #40]	@ (80026c0 <USART_Config+0x6c>)
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
	USART_Handle.Init.StopBits = USART_STOPBITS_1;
 800269a:	4b09      	ldr	r3, [pc, #36]	@ (80026c0 <USART_Config+0x6c>)
 800269c:	2200      	movs	r2, #0
 800269e:	615a      	str	r2, [r3, #20]
	USART_Handle.Init.WordLength = USART_WORDLENGTH_8BITS;
 80026a0:	4b07      	ldr	r3, [pc, #28]	@ (80026c0 <USART_Config+0x6c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]

	USART_Init(&USART_Handle);
 80026a6:	4806      	ldr	r0, [pc, #24]	@ (80026c0 <USART_Config+0x6c>)
 80026a8:	f000 fb32 	bl	8002d10 <USART_Init>

	USART_PeriphState(&USART_Handle, ENABLE);
 80026ac:	2101      	movs	r1, #1
 80026ae:	4804      	ldr	r0, [pc, #16]	@ (80026c0 <USART_Config+0x6c>)
 80026b0:	f000 fc2f 	bl	8002f12 <USART_PeriphState>

}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40023800 	.word	0x40023800
 80026c0:	20012ddc 	.word	0x20012ddc
 80026c4:	40004400 	.word	0x40004400

080026c8 <USART_GPIO_Config>:

void USART_GPIO_Config(void){
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0

	GPIO_InitTypedef GPIO_InitStruct = {0};
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	611a      	str	r2, [r3, #16]
 80026dc:	615a      	str	r2, [r3, #20]

	RCC_GPIOA_CLCK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <USART_GPIO_Config+0x5c>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002724 <USART_GPIO_Config+0x5c>)
 80026e8:	f043 0301 	orr.w	r3, r3, #1
 80026ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <USART_GPIO_Config+0x5c>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]

	GPIO_InitStruct.pinnumber = GPIO_PIN_2 | GPIO_PIN_3;
 80026f8:	230c      	movs	r3, #12
 80026fa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.mode=GPIO_MODER_ALTERNATE;
 80026fc:	2302      	movs	r3, #2
 80026fe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.otype=GPIO_OTYPER_PP;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.speed=GPIO_OSPEED_VERY;
 8002704:	2303      	movs	r3, #3
 8002706:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.pupd=GPIO_PUPD_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.alternate=GPIO_AF7;
 800270c:	2307      	movs	r3, #7
 800270e:	61bb      	str	r3, [r7, #24]

	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	4619      	mov	r1, r3
 8002714:	4804      	ldr	r0, [pc, #16]	@ (8002728 <USART_GPIO_Config+0x60>)
 8002716:	f000 f99e 	bl	8002a56 <GPIO_Init>
}
 800271a:	bf00      	nop
 800271c:	3720      	adds	r7, #32
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	40020000 	.word	0x40020000

0800272c <Task1_Handler>:

void Task1_Handler(void *params){
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]

	char msgtosend1[] = "DUSAN TADIC\r\n";
 8002734:	4b0f      	ldr	r3, [pc, #60]	@ (8002774 <Task1_Handler+0x48>)
 8002736:	f107 0408 	add.w	r4, r7, #8
 800273a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800273c:	c407      	stmia	r4!, {r0, r1, r2}
 800273e:	8023      	strh	r3, [r4, #0]

	while(1){
		if(accesss == 1){
 8002740:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <Task1_Handler+0x4c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d1fb      	bne.n	8002740 <Task1_Handler+0x14>
			accesss2 = 0;
 8002748:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <Task1_Handler+0x50>)
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
			USART_TransmitData(&USART_Handle, (uint8_t*)msgtosend1, sizeof(msgtosend1));
 800274e:	f107 0308 	add.w	r3, r7, #8
 8002752:	220e      	movs	r2, #14
 8002754:	4619      	mov	r1, r3
 8002756:	480a      	ldr	r0, [pc, #40]	@ (8002780 <Task1_Handler+0x54>)
 8002758:	f000 fb90 	bl	8002e7c <USART_TransmitData>
			delay(50000);
 800275c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002760:	f7ff ff34 	bl	80025cc <delay>
			accesss2 = 1;
 8002764:	4b05      	ldr	r3, [pc, #20]	@ (800277c <Task1_Handler+0x50>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]
			accesss=0;
 800276a:	4b03      	ldr	r3, [pc, #12]	@ (8002778 <Task1_Handler+0x4c>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
		if(accesss == 1){
 8002770:	e7e6      	b.n	8002740 <Task1_Handler+0x14>
 8002772:	bf00      	nop
 8002774:	08003034 	.word	0x08003034
 8002778:	20000008 	.word	0x20000008
 800277c:	2000000c 	.word	0x2000000c
 8002780:	20012ddc 	.word	0x20012ddc

08002784 <Task2_Handler>:
		}
	}
}

void Task2_Handler(void *params){
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

	char msgtosend2[] = "EDIN DZEKO\r\n";
 800278c:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <Task2_Handler+0x48>)
 800278e:	f107 0408 	add.w	r4, r7, #8
 8002792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002794:	c407      	stmia	r4!, {r0, r1, r2}
 8002796:	7023      	strb	r3, [r4, #0]

	while(1){
		if(accesss2 == 1){
 8002798:	4b0d      	ldr	r3, [pc, #52]	@ (80027d0 <Task2_Handler+0x4c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d1fb      	bne.n	8002798 <Task2_Handler+0x14>
			accesss = 0;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	@ (80027d4 <Task2_Handler+0x50>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
			USART_TransmitData(&USART_Handle, (uint8_t*)msgtosend2, sizeof(msgtosend2));
 80027a6:	f107 0308 	add.w	r3, r7, #8
 80027aa:	220d      	movs	r2, #13
 80027ac:	4619      	mov	r1, r3
 80027ae:	480a      	ldr	r0, [pc, #40]	@ (80027d8 <Task2_Handler+0x54>)
 80027b0:	f000 fb64 	bl	8002e7c <USART_TransmitData>
			delay(50000);
 80027b4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80027b8:	f7ff ff08 	bl	80025cc <delay>
			accesss = 1;
 80027bc:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <Task2_Handler+0x50>)
 80027be:	2201      	movs	r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
			accesss2=0;
 80027c2:	4b03      	ldr	r3, [pc, #12]	@ (80027d0 <Task2_Handler+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
		if(accesss2 == 1){
 80027c8:	e7e6      	b.n	8002798 <Task2_Handler+0x14>
 80027ca:	bf00      	nop
 80027cc:	08003044 	.word	0x08003044
 80027d0:	2000000c 	.word	0x2000000c
 80027d4:	20000008 	.word	0x20000008
 80027d8:	20012ddc 	.word	0x20012ddc

080027dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027dc:	480d      	ldr	r0, [pc, #52]	@ (8002814 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027e4:	480c      	ldr	r0, [pc, #48]	@ (8002818 <LoopForever+0x6>)
  ldr r1, =_edata
 80027e6:	490d      	ldr	r1, [pc, #52]	@ (800281c <LoopForever+0xa>)
  ldr r2, =_sidata
 80027e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002820 <LoopForever+0xe>)
  movs r3, #0
 80027ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027ec:	e002      	b.n	80027f4 <LoopCopyDataInit>

080027ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027f2:	3304      	adds	r3, #4

080027f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f8:	d3f9      	bcc.n	80027ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002828 <LoopForever+0x16>)
  movs r3, #0
 80027fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002800:	e001      	b.n	8002806 <LoopFillZerobss>

08002802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002804:	3204      	adds	r2, #4

08002806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002808:	d3fb      	bcc.n	8002802 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800280a:	f000 fbc1 	bl	8002f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800280e:	f7ff fe67 	bl	80024e0 <main>

08002812 <LoopForever>:

LoopForever:
  b LoopForever
 8002812:	e7fe      	b.n	8002812 <LoopForever>
  ldr   r0, =_estack
 8002814:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800281c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002820:	08003074 	.word	0x08003074
  ldr r2, =_sbss
 8002824:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002828:	20012dfc 	.word	0x20012dfc

0800282c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800282c:	e7fe      	b.n	800282c <ADC_IRQHandler>
	...

08002830 <EXTI_LineConfig>:
#ifndef SRC_EXTI_C_
#define SRC_EXTI_C_

#include "EXTI.h"

void EXTI_LineConfig(uint8_t PortSource,uint8_t EXTI_LineSource){
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	460a      	mov	r2, r1
 800283a:	71fb      	strb	r3, [r7, #7]
 800283c:	4613      	mov	r3, r2
 800283e:	71bb      	strb	r3, [r7, #6]

	uint32_t temp=SYSCFG->EXTICR[EXTI_LineSource >> 2U];
 8002840:	4a14      	ldr	r2, [pc, #80]	@ (8002894 <EXTI_LineConfig+0x64>)
 8002842:	79bb      	ldrb	r3, [r7, #6]
 8002844:	089b      	lsrs	r3, r3, #2
 8002846:	b2db      	uxtb	r3, r3
 8002848:	3302      	adds	r3, #2
 800284a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284e:	60fb      	str	r3, [r7, #12]
	temp &= ~(0xFU << ((EXTI_LineSource & 0x3U)*4));
 8002850:	79bb      	ldrb	r3, [r7, #6]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	220f      	movs	r2, #15
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4013      	ands	r3, r2
 8002864:	60fb      	str	r3, [r7, #12]
	temp=(PortSource << ((EXTI_LineSource & 0x3U)*4));
 8002866:	79fa      	ldrb	r2, [r7, #7]
 8002868:	79bb      	ldrb	r3, [r7, #6]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	60fb      	str	r3, [r7, #12]
	SYSCFG->EXTICR[EXTI_LineSource >> 2U]=temp;
 8002876:	4907      	ldr	r1, [pc, #28]	@ (8002894 <EXTI_LineConfig+0x64>)
 8002878:	79bb      	ldrb	r3, [r7, #6]
 800287a:	089b      	lsrs	r3, r3, #2
 800287c:	b2db      	uxtb	r3, r3
 800287e:	3302      	adds	r3, #2
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	40013800 	.word	0x40013800

08002898 <EXTI_Init>:

void EXTI_Init(EXTI_IniTypedef *EXTI_InitStruct){
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	uint32_t temp=(uint32_t)(EXTI_BASE_ADDR);
 80028a0:	4b44      	ldr	r3, [pc, #272]	@ (80029b4 <EXTI_Init+0x11c>)
 80028a2:	60fb      	str	r3, [r7, #12]

	EXTI->IMR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80028a4:	4b43      	ldr	r3, [pc, #268]	@ (80029b4 <EXTI_Init+0x11c>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	785b      	ldrb	r3, [r3, #1]
 80028ac:	4619      	mov	r1, r3
 80028ae:	2301      	movs	r3, #1
 80028b0:	408b      	lsls	r3, r1
 80028b2:	43db      	mvns	r3, r3
 80028b4:	493f      	ldr	r1, [pc, #252]	@ (80029b4 <EXTI_Init+0x11c>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]
	EXTI->EMR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80028ba:	4b3e      	ldr	r3, [pc, #248]	@ (80029b4 <EXTI_Init+0x11c>)
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	785b      	ldrb	r3, [r3, #1]
 80028c2:	4619      	mov	r1, r3
 80028c4:	2301      	movs	r3, #1
 80028c6:	408b      	lsls	r3, r1
 80028c8:	43db      	mvns	r3, r3
 80028ca:	493a      	ldr	r1, [pc, #232]	@ (80029b4 <EXTI_Init+0x11c>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]

	if(EXTI_InitStruct->EXTILineCmd != DISABLE){
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d053      	beq.n	8002980 <EXTI_Init+0xe8>

		temp += EXTI_InitStruct->EXTI_Mode;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	78db      	ldrb	r3, [r3, #3]
 80028dc:	461a      	mov	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4413      	add	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
		*((volatile uint32_t*)temp)|=(0x1 << EXTI_InitStruct->EXTI_LineNumber);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	785b      	ldrb	r3, [r3, #1]
 80028ec:	4619      	mov	r1, r3
 80028ee:	2301      	movs	r3, #1
 80028f0:	408b      	lsls	r3, r1
 80028f2:	4619      	mov	r1, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	601a      	str	r2, [r3, #0]

		temp=(uint32_t)(EXTI_BASE_ADDR);
 80028fa:	4b2e      	ldr	r3, [pc, #184]	@ (80029b4 <EXTI_Init+0x11c>)
 80028fc:	60fb      	str	r3, [r7, #12]

		EXTI->RTSR  &=  ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80028fe:	4b2d      	ldr	r3, [pc, #180]	@ (80029b4 <EXTI_Init+0x11c>)
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	785b      	ldrb	r3, [r3, #1]
 8002906:	4619      	mov	r1, r3
 8002908:	2301      	movs	r3, #1
 800290a:	408b      	lsls	r3, r1
 800290c:	43db      	mvns	r3, r3
 800290e:	4929      	ldr	r1, [pc, #164]	@ (80029b4 <EXTI_Init+0x11c>)
 8002910:	4013      	ands	r3, r2
 8002912:	608b      	str	r3, [r1, #8]
		EXTI->FTSR  &=  ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8002914:	4b27      	ldr	r3, [pc, #156]	@ (80029b4 <EXTI_Init+0x11c>)
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	785b      	ldrb	r3, [r3, #1]
 800291c:	4619      	mov	r1, r3
 800291e:	2301      	movs	r3, #1
 8002920:	408b      	lsls	r3, r1
 8002922:	43db      	mvns	r3, r3
 8002924:	4923      	ldr	r1, [pc, #140]	@ (80029b4 <EXTI_Init+0x11c>)
 8002926:	4013      	ands	r3, r2
 8002928:	60cb      	str	r3, [r1, #12]

		if(EXTI_InitStruct->TriggerSelection == EXTI_Trigger_RF){
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	789b      	ldrb	r3, [r3, #2]
 800292e:	2b10      	cmp	r3, #16
 8002930:	d114      	bne.n	800295c <EXTI_Init+0xc4>
			EXTI->RTSR  |=  (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8002932:	4b20      	ldr	r3, [pc, #128]	@ (80029b4 <EXTI_Init+0x11c>)
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	785b      	ldrb	r3, [r3, #1]
 800293a:	4619      	mov	r1, r3
 800293c:	2301      	movs	r3, #1
 800293e:	408b      	lsls	r3, r1
 8002940:	491c      	ldr	r1, [pc, #112]	@ (80029b4 <EXTI_Init+0x11c>)
 8002942:	4313      	orrs	r3, r2
 8002944:	608b      	str	r3, [r1, #8]
			EXTI->FTSR  |=  (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8002946:	4b1b      	ldr	r3, [pc, #108]	@ (80029b4 <EXTI_Init+0x11c>)
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	785b      	ldrb	r3, [r3, #1]
 800294e:	4619      	mov	r1, r3
 8002950:	2301      	movs	r3, #1
 8002952:	408b      	lsls	r3, r1
 8002954:	4917      	ldr	r1, [pc, #92]	@ (80029b4 <EXTI_Init+0x11c>)
 8002956:	4313      	orrs	r3, r2
 8002958:	60cb      	str	r3, [r1, #12]
	else{
		uint32_t temp=(uint32_t)(EXTI_BASE_ADDR);
		temp += EXTI_InitStruct->EXTI_Mode;
		*((volatile uint32_t*)temp) &= ~(0x1 << EXTI_InitStruct->EXTI_LineNumber);
	}
}
 800295a:	e025      	b.n	80029a8 <EXTI_Init+0x110>
			temp += EXTI_InitStruct->TriggerSelection;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	789b      	ldrb	r3, [r3, #2]
 8002960:	461a      	mov	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4413      	add	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
			*((volatile uint32_t*)temp)|=(0x1 << EXTI_InitStruct->EXTI_LineNumber);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	785b      	ldrb	r3, [r3, #1]
 8002970:	4619      	mov	r1, r3
 8002972:	2301      	movs	r3, #1
 8002974:	408b      	lsls	r3, r1
 8002976:	4619      	mov	r1, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	430a      	orrs	r2, r1
 800297c:	601a      	str	r2, [r3, #0]
}
 800297e:	e013      	b.n	80029a8 <EXTI_Init+0x110>
		uint32_t temp=(uint32_t)(EXTI_BASE_ADDR);
 8002980:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <EXTI_Init+0x11c>)
 8002982:	60bb      	str	r3, [r7, #8]
		temp += EXTI_InitStruct->EXTI_Mode;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	78db      	ldrb	r3, [r3, #3]
 8002988:	461a      	mov	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	4413      	add	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]
		*((volatile uint32_t*)temp) &= ~(0x1 << EXTI_InitStruct->EXTI_LineNumber);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	785b      	ldrb	r3, [r3, #1]
 8002998:	4619      	mov	r1, r3
 800299a:	2301      	movs	r3, #1
 800299c:	408b      	lsls	r3, r1
 800299e:	43db      	mvns	r3, r3
 80029a0:	4619      	mov	r1, r3
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	400a      	ands	r2, r1
 80029a6:	601a      	str	r2, [r3, #0]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	40013c00 	.word	0x40013c00

080029b8 <NVIC_EnableInterrupt>:

void NVIC_EnableInterrupt(IRQNumber_Typedef IRQnumber){
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	71fb      	strb	r3, [r7, #7]
	uint32_t temp=0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
	temp = *((IRQnumber >> 5U)+NVIC_ISER0);
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80029d2:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	60fb      	str	r3, [r7, #12]
	temp &= ~(0x1 << (IRQnumber & 0x1FU));
 80029da:	79fb      	ldrb	r3, [r7, #7]
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2201      	movs	r2, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4013      	ands	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]
	temp |= (0x1 << (IRQnumber & 0x1FU));
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	f003 031f 	and.w	r3, r3, #31
 80029f6:	2201      	movs	r2, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
	*((IRQnumber >> 5U)+NVIC_ISER0) = temp;
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8002a10:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	601a      	str	r2, [r3, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <GPIO_Write_Pin>:
#ifndef SRC_GPIO_C_
#define SRC_GPIO_C_

#include "GPIO.h"

void GPIO_Write_Pin(GPIO_Typedef *GPIOx,uint16_t pinnumber,GPIO_PinState pinstate){
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
 8002a30:	4613      	mov	r3, r2
 8002a32:	707b      	strb	r3, [r7, #1]
	if(pinstate == GPIO_PIN_SET){
 8002a34:	787b      	ldrb	r3, [r7, #1]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d103      	bne.n	8002a42 <GPIO_Write_Pin+0x1e>
		GPIOx->BSSR=pinnumber;
 8002a3a:	887a      	ldrh	r2, [r7, #2]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	619a      	str	r2, [r3, #24]
	}
	else{
		GPIOx->BSSR=pinnumber << 16U;
	}
}
 8002a40:	e003      	b.n	8002a4a <GPIO_Write_Pin+0x26>
		GPIOx->BSSR=pinnumber << 16U;
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	041a      	lsls	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	619a      	str	r2, [r3, #24]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <GPIO_Init>:
	GPIOx->LCKR=temp;
	temp=GPIOx->LCKR;

}

void GPIO_Init(GPIO_Typedef *GPIOx,GPIO_InitTypedef *GPIOStructures){
 8002a56:	b480      	push	{r7}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t fakeposition=0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	613b      	str	r3, [r7, #16]
	uint32_t lastposition=0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]

	for(position = 0;position < 16;position++){
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e09f      	b.n	8002bae <GPIO_Init+0x158>

		fakeposition = (0x1 << position);
 8002a6e:	2201      	movs	r2, #1
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	613b      	str	r3, [r7, #16]
		lastposition = (uint32_t)(GPIOStructures->pinnumber)&fakeposition;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

		if(fakeposition == lastposition){
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	f040 808e 	bne.w	8002ba8 <GPIO_Init+0x152>

			uint32_t temp=GPIOx->MODER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60bb      	str	r3, [r7, #8]
			temp &= ~(0x3U << (position * 2));
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
			temp |= (GPIOStructures->mode << (position * 2));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60bb      	str	r3, [r7, #8]
			GPIOx->MODER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	601a      	str	r2, [r3, #0]

			if(GPIOStructures->mode == GPIO_MODER_OUTPUT || GPIOStructures->mode == GPIO_MODER_ALTERNATE){
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d003      	beq.n	8002acc <GPIO_Init+0x76>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d12d      	bne.n	8002b28 <GPIO_Init+0xd2>
				temp = GPIOx->OTYPER;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	60bb      	str	r3, [r7, #8]
				temp &= ~(0x1U << position);
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	60bb      	str	r3, [r7, #8]
				temp |= (GPIOStructures->otype << position);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60bb      	str	r3, [r7, #8]
				GPIOx->OTYPER = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	605a      	str	r2, [r3, #4]

				temp=GPIOx->OSPEEDR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	60bb      	str	r3, [r7, #8]
				temp &= ~(0x3U << (position * 2));
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
				temp |= (GPIOStructures->speed<< (position * 2));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60bb      	str	r3, [r7, #8]
				GPIOx->OSPEEDR= temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	609a      	str	r2, [r3, #8]
			}

			temp=GPIOx->PUPDR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	60bb      	str	r3, [r7, #8]
			temp &= ~(0x3U << (position * 2));
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2203      	movs	r2, #3
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	60bb      	str	r3, [r7, #8]
			temp |= (GPIOStructures->pupd<< (position * 2));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60bb      	str	r3, [r7, #8]
			GPIOx->PUPDR= temp;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	60da      	str	r2, [r3, #12]

			if(GPIOStructures->mode == GPIO_MODER_ALTERNATE){
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d123      	bne.n	8002ba8 <GPIO_Init+0x152>
				temp = GPIOx->AFR[position >> 3U];
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	08da      	lsrs	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3208      	adds	r2, #8
 8002b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b6c:	60bb      	str	r3, [r7, #8]
				temp &= ~(0xFU << ((position & 0x7U)*4));
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	220f      	movs	r2, #15
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	68ba      	ldr	r2, [r7, #8]
 8002b80:	4013      	ands	r3, r2
 8002b82:	60bb      	str	r3, [r7, #8]
				temp |= (GPIOStructures->alternate << ((position & 0x7U)*4));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60bb      	str	r3, [r7, #8]
				GPIOx->AFR[position >> 3U] = temp;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	08da      	lsrs	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3208      	adds	r2, #8
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(position = 0;position < 16;position++){
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	3301      	adds	r3, #1
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b0f      	cmp	r3, #15
 8002bb2:	f67f af5c 	bls.w	8002a6e <GPIO_Init+0x18>
			}
		}

	}
}
 8002bb6:	bf00      	nop
 8002bb8:	bf00      	nop
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <RCC_GetSystemClock>:

const uint8_t AHB_Prescaler[] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

const uint8_t APB_Prescaler[] = {0, 0, 0, 0, 1, 2, 3, 4};

uint32_t RCC_GetSystemClock(void){
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0


	uint8_t clckSource = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	71fb      	strb	r3, [r7, #7]

	clckSource = ((RCC->CFGR >> 2U) & 0x3U);
 8002bce:	4b10      	ldr	r3, [pc, #64]	@ (8002c10 <RCC_GetSystemClock+0x4c>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	089b      	lsrs	r3, r3, #2
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	71fb      	strb	r3, [r7, #7]

	switch(clckSource){
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <RCC_GetSystemClock+0x24>
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d004      	beq.n	8002bf0 <RCC_GetSystemClock+0x2c>
 8002be6:	e007      	b.n	8002bf8 <RCC_GetSystemClock+0x34>
	case 0:
		SystemCoreClock = 16000000;
 8002be8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c14 <RCC_GetSystemClock+0x50>)
 8002bea:	4a0b      	ldr	r2, [pc, #44]	@ (8002c18 <RCC_GetSystemClock+0x54>)
 8002bec:	601a      	str	r2, [r3, #0]
		break;
 8002bee:	e006      	b.n	8002bfe <RCC_GetSystemClock+0x3a>
	case 1:
		SystemCoreClock = 8000000;
 8002bf0:	4b08      	ldr	r3, [pc, #32]	@ (8002c14 <RCC_GetSystemClock+0x50>)
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c1c <RCC_GetSystemClock+0x58>)
 8002bf4:	601a      	str	r2, [r3, #0]
		break;
 8002bf6:	e002      	b.n	8002bfe <RCC_GetSystemClock+0x3a>
	default:
		SystemCoreClock = 16000000;
 8002bf8:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <RCC_GetSystemClock+0x50>)
 8002bfa:	4a07      	ldr	r2, [pc, #28]	@ (8002c18 <RCC_GetSystemClock+0x54>)
 8002bfc:	601a      	str	r2, [r3, #0]

	}

	return SystemCoreClock;
 8002bfe:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <RCC_GetSystemClock+0x50>)
 8002c00:	681b      	ldr	r3, [r3, #0]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800
 8002c14:	20000010 	.word	0x20000010
 8002c18:	00f42400 	.word	0x00f42400
 8002c1c:	007a1200 	.word	0x007a1200

08002c20 <RCC_GetHClock>:

uint32_t RCC_GetHClock(void){
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0

	uint32_t AHB_PeriphClock = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
	uint32_t SystemCoreClock = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
	uint8_t HPRE_Value = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	71bb      	strb	r3, [r7, #6]

	SystemCoreClock = RCC_GetSystemClock();
 8002c36:	f7ff ffc5 	bl	8002bc4 <RCC_GetSystemClock>
 8002c3a:	60b8      	str	r0, [r7, #8]

	HPRE_Value = ( (RCC->CFGR >> 4U) & 0xFU);
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <RCC_GetHClock+0x48>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	71fb      	strb	r3, [r7, #7]
	temp = AHB_Prescaler[HPRE_Value];
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	4a07      	ldr	r2, [pc, #28]	@ (8002c6c <RCC_GetHClock+0x4c>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	71bb      	strb	r3, [r7, #6]

	AHB_PeriphClock = SystemCoreClock >> temp;
 8002c52:	79bb      	ldrb	r3, [r7, #6]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5a:	60fb      	str	r3, [r7, #12]

	return AHB_PeriphClock;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	08003054 	.word	0x08003054

08002c70 <RCC_GetPClock1>:

uint32_t RCC_GetPClock1(void){
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0

	uint32_t APB1_PeriphClock = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
	uint32_t Hclock = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
	uint8_t HPRE1_Value = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	71bb      	strb	r3, [r7, #6]

	Hclock = RCC_GetHClock();
 8002c86:	f7ff ffcb 	bl	8002c20 <RCC_GetHClock>
 8002c8a:	60b8      	str	r0, [r7, #8]

	HPRE1_Value = ((RCC->CFGR >> 10U) & 0x7U);
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <RCC_GetPClock1+0x48>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	0a9b      	lsrs	r3, r3, #10
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	71fb      	strb	r3, [r7, #7]

	temp = APB_Prescaler[HPRE1_Value];
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	4a07      	ldr	r2, [pc, #28]	@ (8002cbc <RCC_GetPClock1+0x4c>)
 8002c9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ca0:	71bb      	strb	r3, [r7, #6]

	APB1_PeriphClock = (Hclock >> temp);
 8002ca2:	79bb      	ldrb	r3, [r7, #6]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8002caa:	60fb      	str	r3, [r7, #12]

	return APB1_PeriphClock;
 8002cac:	68fb      	ldr	r3, [r7, #12]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	08003064 	.word	0x08003064

08002cc0 <RCC_GetPClock2>:

uint32_t RCC_GetPClock2(void){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0

	uint32_t APB2_PeriphClock = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
	uint32_t Hclock = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
	uint8_t HPRE2_Value = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	71bb      	strb	r3, [r7, #6]

	Hclock = RCC_GetHClock();
 8002cd6:	f7ff ffa3 	bl	8002c20 <RCC_GetHClock>
 8002cda:	60b8      	str	r0, [r7, #8]

	HPRE2_Value = ((RCC->CFGR >> 13U) & 0x7U);
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <RCC_GetPClock2+0x48>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	0b5b      	lsrs	r3, r3, #13
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	71fb      	strb	r3, [r7, #7]

	temp = APB_Prescaler[HPRE2_Value];
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	4a07      	ldr	r2, [pc, #28]	@ (8002d0c <RCC_GetPClock2+0x4c>)
 8002cee:	5cd3      	ldrb	r3, [r2, r3]
 8002cf0:	71bb      	strb	r3, [r7, #6]

	APB2_PeriphClock = (Hclock >> temp);
 8002cf2:	79bb      	ldrb	r3, [r7, #6]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfa:	60fb      	str	r3, [r7, #12]

	return APB2_PeriphClock;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	08003064 	.word	0x08003064

08002d10 <USART_Init>:
#ifndef SRC_USART_C_
#define SRC_USART_C_

#include "USART.h"

void USART_Init(USART_HandlerTypedef *USART_Handle){
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]

	uint32_t periphClock = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
	uint32_t mantissaPart = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
	uint32_t fractionPart = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
	uint32_t USART_DIV_Value = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	613b      	str	r3, [r7, #16]
	uint32_t temp1 = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]

	uint32_t temp = USART_Handle->Instance->CR1;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	60bb      	str	r3, [r7, #8]
	temp |= (USART_Handle->Init.OverSampling) | (USART_Handle->Init.WordLength) | (USART_Handle->Init.Mode) | \
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	431a      	orrs	r2, r3
			(USART_Handle->Init.Parity);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
	temp |= (USART_Handle->Init.OverSampling) | (USART_Handle->Init.WordLength) | (USART_Handle->Init.Mode) | \
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60bb      	str	r3, [r7, #8]
	USART_Handle->Instance->CR1 = temp;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	60da      	str	r2, [r3, #12]

	temp = USART_Handle->Instance->CR2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	60bb      	str	r3, [r7, #8]
	temp &= ~(0x3U << USART_CR2_STOP);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d66:	60bb      	str	r3, [r7, #8]
	temp |= (USART_Handle->Init.StopBits);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60bb      	str	r3, [r7, #8]
	USART_Handle->Instance->CR2=temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	611a      	str	r2, [r3, #16]

	temp=USART_Handle->Instance->CR3;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	60bb      	str	r3, [r7, #8]
	temp |= (USART_Handle->Init.HardWareFlowControl);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]
	USART_Handle->Instance->CR3=temp;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	615a      	str	r2, [r3, #20]

	if(USART_Handle->Instance == USART1 || USART_Handle->Instance == USART6){
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a35      	ldr	r2, [pc, #212]	@ (8002e70 <USART_Init+0x160>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d004      	beq.n	8002da8 <USART_Init+0x98>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a34      	ldr	r2, [pc, #208]	@ (8002e74 <USART_Init+0x164>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d103      	bne.n	8002db0 <USART_Init+0xa0>
		periphClock = RCC_GetPClock2();
 8002da8:	f7ff ff8a 	bl	8002cc0 <RCC_GetPClock2>
 8002dac:	61f8      	str	r0, [r7, #28]
 8002dae:	e002      	b.n	8002db6 <USART_Init+0xa6>
	}
	else{
		periphClock = RCC_GetPClock1();
 8002db0:	f7ff ff5e 	bl	8002c70 <RCC_GetPClock1>
 8002db4:	61f8      	str	r0, [r7, #28]
	}

	if(USART_Handle->Init.OverSampling == USART_OVERSAMPLE_8){
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dbe:	d123      	bne.n	8002e08 <USART_Init+0xf8>

		USART_DIV_Value = __USART_OVERSAMPLING_8(periphClock,USART_Handle->Init.BaudRate);
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009a      	lsls	r2, r3, #2
 8002dca:	441a      	add	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd6:	613b      	str	r3, [r7, #16]
		mantissaPart = (USART_DIV_Value /100U);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4a27      	ldr	r2, [pc, #156]	@ (8002e78 <USART_Init+0x168>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	61bb      	str	r3, [r7, #24]
		fractionPart = (USART_DIV_Value) - (mantissaPart * 100U);
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2264      	movs	r2, #100	@ 0x64
 8002de8:	fb02 f303 	mul.w	r3, r2, r3
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	617b      	str	r3, [r7, #20]

		fractionPart = ((((fractionPart * 8U) + 50U) / 100U) & (0x07U));
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	3332      	adds	r3, #50	@ 0x32
 8002df8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e78 <USART_Init+0x168>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	095b      	lsrs	r3, r3, #5
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	e022      	b.n	8002e4e <USART_Init+0x13e>
	}
	else{

		USART_DIV_Value = __USART_OVERSAMPLING_16(periphClock,USART_Handle->Init.BaudRate);
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	009a      	lsls	r2, r3, #2
 8002e12:	441a      	add	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1e:	613b      	str	r3, [r7, #16]
		mantissaPart = (USART_DIV_Value /100U);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4a15      	ldr	r2, [pc, #84]	@ (8002e78 <USART_Init+0x168>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	61bb      	str	r3, [r7, #24]
		fractionPart = (USART_DIV_Value) - (mantissaPart * 100U);
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2264      	movs	r2, #100	@ 0x64
 8002e30:	fb02 f303 	mul.w	r3, r2, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]

		fractionPart = ((((fractionPart * 16U) + 50U) / 100U) & (0x07U));
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	3332      	adds	r3, #50	@ 0x32
 8002e40:	4a0d      	ldr	r2, [pc, #52]	@ (8002e78 <USART_Init+0x168>)
 8002e42:	fba2 2303 	umull	r2, r3, r2, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	617b      	str	r3, [r7, #20]
	}

	temp1 |= (mantissaPart << 4U);
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
	temp1 |= (fractionPart << 0U);
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]

	USART_Handle->Instance->BRR = temp1;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	609a      	str	r2, [r3, #8]
}
 8002e68:	bf00      	nop
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40011000 	.word	0x40011000
 8002e74:	40011400 	.word	0x40011400
 8002e78:	51eb851f 	.word	0x51eb851f

08002e7c <USART_TransmitData>:

void USART_TransmitData(USART_HandlerTypedef *USART_Handle, uint8_t *pData, uint16_t sizeofData){
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	4613      	mov	r3, r2
 8002e88:	80fb      	strh	r3, [r7, #6]

	uint16_t *data16Bits;

	if((USART_Handle->Init.WordLength == USART_WORDLENGTH_9BITS) && (USART_Handle->Init.Parity == USART_PARITY_NONE)){
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e92:	d106      	bne.n	8002ea2 <USART_TransmitData+0x26>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d102      	bne.n	8002ea2 <USART_TransmitData+0x26>
		data16Bits = (uint16_t *)pData;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	e001      	b.n	8002ea6 <USART_TransmitData+0x2a>
	}
	else{
		data16Bits = NULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
	}

	while(sizeofData > 0){
 8002ea6:	e024      	b.n	8002ef2 <USART_TransmitData+0x76>

		while( !(USART_GetFlagStatus(USART_Handle, USART_TxE_FLAG)) );
 8002ea8:	bf00      	nop
 8002eaa:	2180      	movs	r1, #128	@ 0x80
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f850 	bl	8002f52 <USART_GetFlagStatus>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0f8      	beq.n	8002eaa <USART_TransmitData+0x2e>

		if(data16Bits == NULL){
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10b      	bne.n	8002ed6 <USART_TransmitData+0x5a>
			USART_Handle->Instance->DR = (uint8_t)(*pData & 0xFFU);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	781a      	ldrb	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
			pData++;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	3301      	adds	r3, #1
 8002ecc:	60bb      	str	r3, [r7, #8]
			sizeofData--;
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	80fb      	strh	r3, [r7, #6]
 8002ed4:	e00d      	b.n	8002ef2 <USART_TransmitData+0x76>

		}
		else{
			USART_Handle->Instance->DR = (uint16_t)(*data16Bits & (0x01FFU));
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ee4:	605a      	str	r2, [r3, #4]
			data16Bits++;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	3302      	adds	r3, #2
 8002eea:	617b      	str	r3, [r7, #20]
			sizeofData -= 2;
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	3b02      	subs	r3, #2
 8002ef0:	80fb      	strh	r3, [r7, #6]
	while(sizeofData > 0){
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1d7      	bne.n	8002ea8 <USART_TransmitData+0x2c>
		}
	}

	while(!(USART_GetFlagStatus(USART_Handle, USART_TC_FLAG)));
 8002ef8:	bf00      	nop
 8002efa:	2140      	movs	r1, #64	@ 0x40
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f828 	bl	8002f52 <USART_GetFlagStatus>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f8      	beq.n	8002efa <USART_TransmitData+0x7e>
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <USART_PeriphState>:
			}
		}
	}
}

void USART_PeriphState(USART_HandlerTypedef *USART_Handle, FunctionalState USARTstate){
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	70fb      	strb	r3, [r7, #3]

	if(USARTstate == ENABLE){
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d108      	bne.n	8002f36 <USART_PeriphState+0x24>

		USART_Handle->Instance->CR1 |= (0x1U << USART_CR1_UE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f32:	60da      	str	r2, [r3, #12]
	}
	else{

		USART_Handle->Instance->CR1 &= ~(0x1U << USART_CR1_UE);
	}
}
 8002f34:	e007      	b.n	8002f46 <USART_PeriphState+0x34>
		USART_Handle->Instance->CR1 &= ~(0x1U << USART_CR1_UE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f44:	60da      	str	r2, [r3, #12]
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <USART_GetFlagStatus>:

USART_FlagStatus USART_GetFlagStatus(USART_HandlerTypedef *USART_Handle, uint16_t flagName){
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	807b      	strh	r3, [r7, #2]

	return(USART_Handle->Instance->SR & flagName) ? USART_FLAG_SET : USART_FLAG_RESET;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	887b      	ldrh	r3, [r7, #2]
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <memset>:
 8002f7e:	4402      	add	r2, r0
 8002f80:	4603      	mov	r3, r0
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d100      	bne.n	8002f88 <memset+0xa>
 8002f86:	4770      	bx	lr
 8002f88:	f803 1b01 	strb.w	r1, [r3], #1
 8002f8c:	e7f9      	b.n	8002f82 <memset+0x4>
	...

08002f90 <__libc_init_array>:
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	4d0d      	ldr	r5, [pc, #52]	@ (8002fc8 <__libc_init_array+0x38>)
 8002f94:	4c0d      	ldr	r4, [pc, #52]	@ (8002fcc <__libc_init_array+0x3c>)
 8002f96:	1b64      	subs	r4, r4, r5
 8002f98:	10a4      	asrs	r4, r4, #2
 8002f9a:	2600      	movs	r6, #0
 8002f9c:	42a6      	cmp	r6, r4
 8002f9e:	d109      	bne.n	8002fb4 <__libc_init_array+0x24>
 8002fa0:	4d0b      	ldr	r5, [pc, #44]	@ (8002fd0 <__libc_init_array+0x40>)
 8002fa2:	4c0c      	ldr	r4, [pc, #48]	@ (8002fd4 <__libc_init_array+0x44>)
 8002fa4:	f000 f826 	bl	8002ff4 <_init>
 8002fa8:	1b64      	subs	r4, r4, r5
 8002faa:	10a4      	asrs	r4, r4, #2
 8002fac:	2600      	movs	r6, #0
 8002fae:	42a6      	cmp	r6, r4
 8002fb0:	d105      	bne.n	8002fbe <__libc_init_array+0x2e>
 8002fb2:	bd70      	pop	{r4, r5, r6, pc}
 8002fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb8:	4798      	blx	r3
 8002fba:	3601      	adds	r6, #1
 8002fbc:	e7ee      	b.n	8002f9c <__libc_init_array+0xc>
 8002fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc2:	4798      	blx	r3
 8002fc4:	3601      	adds	r6, #1
 8002fc6:	e7f2      	b.n	8002fae <__libc_init_array+0x1e>
 8002fc8:	0800306c 	.word	0x0800306c
 8002fcc:	0800306c 	.word	0x0800306c
 8002fd0:	0800306c 	.word	0x0800306c
 8002fd4:	08003070 	.word	0x08003070

08002fd8 <memcpy>:
 8002fd8:	440a      	add	r2, r1
 8002fda:	4291      	cmp	r1, r2
 8002fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fe0:	d100      	bne.n	8002fe4 <memcpy+0xc>
 8002fe2:	4770      	bx	lr
 8002fe4:	b510      	push	{r4, lr}
 8002fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fee:	4291      	cmp	r1, r2
 8002ff0:	d1f9      	bne.n	8002fe6 <memcpy+0xe>
 8002ff2:	bd10      	pop	{r4, pc}

08002ff4 <_init>:
 8002ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff6:	bf00      	nop
 8002ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffa:	bc08      	pop	{r3}
 8002ffc:	469e      	mov	lr, r3
 8002ffe:	4770      	bx	lr

08003000 <_fini>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	bf00      	nop
 8003004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003006:	bc08      	pop	{r3}
 8003008:	469e      	mov	lr, r3
 800300a:	4770      	bx	lr
